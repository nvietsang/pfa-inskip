
simpleserial-glitch-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002444  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800264c  0800264c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800264c  0800264c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800264c  0800264c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  20000078  080026cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20001430  080026cc  00021430  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f99  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e56  00000000  00000000  0002503b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003b1b  00000000  00000000  00025e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  000299ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000640  00000000  00000000  00029bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003518  00000000  00000000  0002a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000155c  00000000  00000000  0002d70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0002ec68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd4  00000000  00000000  0002ecb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000001d4  00000000  00000000  0002fa88  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001a5  00000000  00000000  0002fc5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080025b4 	.word	0x080025b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080025b4 	.word	0x080025b4

080001c8 <aes_gen_tables>:
#define MUL(x, y) (((x) && (y)) ? pow[(log[(x)]+log[(y)]) % 255] : 0)

MBEDTLS_MAYBE_UNUSED static int aes_init_done = 0;

MBEDTLS_MAYBE_UNUSED static void aes_gen_tables(void)
{
 80001c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ca:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80001ce:	4668      	mov	r0, sp
    uint8_t log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for (i = 0, x = 1; i < 256; i++) {
 80001d0:	2301      	movs	r3, #1
 80001d2:	2200      	movs	r2, #0
 80001d4:	4605      	mov	r5, r0
        pow[i] = x;
        log[x] = (uint8_t) i;
 80001d6:	ac40      	add	r4, sp, #256	; 0x100
 80001d8:	54e2      	strb	r2, [r4, r3]
        x ^= XTIME(x);       
 80001da:	f343 0606 	sbfx	r6, r3, #0, #7
        pow[i] = x;
 80001de:	f800 3b01 	strb.w	r3, [r0], #1
        x ^= XTIME(x);       
 80001e2:	b25b      	sxtb	r3, r3
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	bfb4      	ite	lt
 80001e8:	211b      	movlt	r1, #27
 80001ea:	2100      	movge	r1, #0
 80001ec:	ea83 0346 	eor.w	r3, r3, r6, lsl #1
    for (i = 0, x = 1; i < 256; i++) {
 80001f0:	3201      	adds	r2, #1
        x ^= XTIME(x);       
 80001f2:	404b      	eors	r3, r1
    for (i = 0, x = 1; i < 256; i++) {
 80001f4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        x ^= XTIME(x);       
 80001f8:	b2db      	uxtb	r3, r3
    for (i = 0, x = 1; i < 256; i++) {
 80001fa:	d1ed      	bne.n	80001d8 <aes_gen_tables+0x10>
    }

    /*
     * calculate the round constants
     */
    trigger_high();
 80001fc:	f000 fdda 	bl	8000db4 <trigger_high>
    for (i = 0, x = 1; i < 10; i++) {
 8000200:	4938      	ldr	r1, [pc, #224]	; (80002e4 <aes_gen_tables+0x11c>)
 8000202:	2301      	movs	r3, #1
 8000204:	2200      	movs	r2, #0
 8000206:	460e      	mov	r6, r1
        round_constants[i] = x;
        x = XTIME(x);
 8000208:	f013 0f80 	tst.w	r3, #128	; 0x80
        round_constants[i] = x;
 800020c:	f841 3b04 	str.w	r3, [r1], #4
        x = XTIME(x);
 8000210:	f343 0006 	sbfx	r0, r3, #0, #7
    for (i = 0, x = 1; i < 10; i++) {
 8000214:	f102 0201 	add.w	r2, r2, #1
        x = XTIME(x);
 8000218:	bf14      	ite	ne
 800021a:	231b      	movne	r3, #27
 800021c:	2300      	moveq	r3, #0
 800021e:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
    for (i = 0, x = 1; i < 10; i++) {
 8000222:	2a0a      	cmp	r2, #10
        x = XTIME(x);
 8000224:	b2db      	uxtb	r3, r3
    for (i = 0, x = 1; i < 10; i++) {
 8000226:	d1ef      	bne.n	8000208 <aes_gen_tables+0x40>
    }
    trigger_low();
 8000228:	f000 fdcb 	bl	8000dc2 <trigger_low>

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 800022c:	2363      	movs	r3, #99	; 0x63
        x ^= y; y = (y << 1) | (y >> 7);
        x ^= y; y = (y << 1) | (y >> 7);
        x ^= y; y = (y << 1) | (y >> 7);
        x ^= y ^ 0x63;

        FSb[i] = x;
 800022e:	482e      	ldr	r0, [pc, #184]	; (80002e8 <aes_gen_tables+0x120>)
    FSb[0x00] = 0x63;
 8000230:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
    for (i = 1; i < 256; i++) {
 8000234:	2201      	movs	r2, #1
        x = pow[255 - log[i]];
 8000236:	5ca3      	ldrb	r3, [r4, r2]
 8000238:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800023c:	5ce9      	ldrb	r1, [r5, r3]
        y  = x; y = (y << 1) | (y >> 7);
 800023e:	09cb      	lsrs	r3, r1, #7
 8000240:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000244:	b2de      	uxtb	r6, r3
        x ^= y; y = (y << 1) | (y >> 7);
 8000246:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800024a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 800024e:	fa5f fc83 	uxtb.w	ip, r3
        x ^= y; y = (y << 1) | (y >> 7);
 8000252:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000256:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
 800025a:	b2df      	uxtb	r7, r3
        x ^= y; y = (y << 1) | (y >> 7);
 800025c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000260:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
 8000264:	b25b      	sxtb	r3, r3
        x ^= y ^ 0x63;
 8000266:	404b      	eors	r3, r1
 8000268:	4073      	eors	r3, r6
 800026a:	ea8c 0c03 	eor.w	ip, ip, r3
 800026e:	ea87 070c 	eor.w	r7, r7, ip
 8000272:	f087 0763 	eor.w	r7, r7, #99	; 0x63
        FSb[i] = x;
 8000276:	5487      	strb	r7, [r0, r2]
    for (i = 1; i < 256; i++) {
 8000278:	3201      	adds	r2, #1
 800027a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800027e:	d1da      	bne.n	8000236 <aes_gen_tables+0x6e>
 8000280:	4819      	ldr	r0, [pc, #100]	; (80002e8 <aes_gen_tables+0x120>)
    }

    /*
     * generate the forward and reverse tables
     */
    for (i = 0; i < 256; i++) {
 8000282:	2400      	movs	r4, #0
 8000284:	f500 7c80 	add.w	ip, r0, #256	; 0x100
 8000288:	f500 67a0 	add.w	r7, r0, #1280	; 0x500
 800028c:	f500 6610 	add.w	r6, r0, #2304	; 0x900
 8000290:	f500 6550 	add.w	r5, r0, #3328	; 0xd00
        x = FSb[i];
 8000294:	f810 2b01 	ldrb.w	r2, [r0], #1
        y = XTIME(x);
 8000298:	f012 0f80 	tst.w	r2, #128	; 0x80
 800029c:	f342 0306 	sbfx	r3, r2, #0, #7
 80002a0:	bf14      	ite	ne
 80002a2:	211b      	movne	r1, #27
 80002a4:	2100      	moveq	r1, #0
 80002a6:	ea81 0143 	eor.w	r1, r1, r3, lsl #1
        z = y ^ x;

        FT0[i] = ((uint32_t) y) ^
                 ((uint32_t) x <<  8) ^
                 ((uint32_t) x << 16) ^
 80002aa:	0413      	lsls	r3, r2, #16
        y = XTIME(x);
 80002ac:	b2c9      	uxtb	r1, r1
                 ((uint32_t) x <<  8) ^
 80002ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80002b2:	404b      	eors	r3, r1
                 ((uint32_t) z << 24);
 80002b4:	404a      	eors	r2, r1
                 ((uint32_t) x << 16) ^
 80002b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8(FT0[i]);
 80002ba:	ea4f 6233 	mov.w	r2, r3, ror #24
    for (i = 0; i < 256; i++) {
 80002be:	3401      	adds	r4, #1
        FT0[i] = ((uint32_t) y) ^
 80002c0:	f84c 3b04 	str.w	r3, [ip], #4
        FT1[i] = ROTL8(FT0[i]);
 80002c4:	f847 2b04 	str.w	r2, [r7], #4
    for (i = 0; i < 256; i++) {
 80002c8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
        FT2[i] = ROTL8(FT1[i]);
 80002cc:	ea4f 4233 	mov.w	r2, r3, ror #16
        FT3[i] = ROTL8(FT2[i]);
 80002d0:	ea4f 2333 	mov.w	r3, r3, ror #8
        FT2[i] = ROTL8(FT1[i]);
 80002d4:	f846 2b04 	str.w	r2, [r6], #4
        FT3[i] = ROTL8(FT2[i]);
 80002d8:	f845 3b04 	str.w	r3, [r5], #4
    for (i = 0; i < 256; i++) {
 80002dc:	d1da      	bne.n	8000294 <aes_gen_tables+0xcc>
        RT2[i] = ROTL8(RT1[i]);
        RT3[i] = ROTL8(RT2[i]);
#endif /* !MBEDTLS_AES_FEWER_TABLES */
#endif /* MBEDTLS_AES_NEED_REVERSE_TABLES */
    }
}
 80002de:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80002e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e4:	20000094 	.word	0x20000094
 80002e8:	200000bc 	.word	0x200000bc

080002ec <mbedtls_platform_zeroize.part.0>:
}

void mbedtls_platform_zeroize(void *buf, size_t len)
{
    if (len > 0) {
        memset_func(buf, 0, len);
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <mbedtls_platform_zeroize.part.0+0x10>)
void mbedtls_platform_zeroize(void *buf, size_t len)
 80002ee:	b510      	push	{r4, lr}
 80002f0:	460a      	mov	r2, r1
        memset_func(buf, 0, len);
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2100      	movs	r1, #0
void mbedtls_platform_zeroize(void *buf, size_t len)
 80002f6:	4604      	mov	r4, r0
        memset_func(buf, 0, len);
 80002f8:	4798      	blx	r3
#pragma GCC diagnostic pop
#endif
#endif
#endif
    }
}
 80002fa:	bd10      	pop	{r4, pc}
 80002fc:	20000000 	.word	0x20000000

08000300 <mbedtls_aes_setkey_enc>:
    switch (keybits) {
 8000300:	2ac0      	cmp	r2, #192	; 0xc0
{
 8000302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000304:	4605      	mov	r5, r0
 8000306:	460e      	mov	r6, r1
 8000308:	4614      	mov	r4, r2
    switch (keybits) {
 800030a:	d056      	beq.n	80003ba <mbedtls_aes_setkey_enc+0xba>
 800030c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000310:	d055      	beq.n	80003be <mbedtls_aes_setkey_enc+0xbe>
 8000312:	2a80      	cmp	r2, #128	; 0x80
 8000314:	f040 80eb 	bne.w	80004ee <mbedtls_aes_setkey_enc+0x1ee>
        case 128: ctx->nr = 10; break;
 8000318:	230a      	movs	r3, #10
    if (aes_init_done == 0) {
 800031a:	4f76      	ldr	r7, [pc, #472]	; (80004f4 <mbedtls_aes_setkey_enc+0x1f4>)
        case 256: ctx->nr = 14; break;
 800031c:	602b      	str	r3, [r5, #0]
    if (aes_init_done == 0) {
 800031e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000320:	b943      	cbnz	r3, 8000334 <mbedtls_aes_setkey_enc+0x34>
        n_gencalls++;
 8000322:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000326:	3301      	adds	r3, #1
 8000328:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        aes_gen_tables();
 800032c:	f7ff ff4c 	bl	80001c8 <aes_gen_tables>
        aes_init_done = 1;
 8000330:	2301      	movs	r3, #1
 8000332:	633b      	str	r3, [r7, #48]	; 0x30
    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 8000334:	2300      	movs	r3, #0
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 8000336:	0964      	lsrs	r4, r4, #5
    ctx->rk_offset = mbedtls_aes_rk_offset(ctx->buf);
 8000338:	606b      	str	r3, [r5, #4]
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 800033a:	4631      	mov	r1, r6
 800033c:	f105 0308 	add.w	r3, r5, #8
 8000340:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000344:	428c      	cmp	r4, r1
 8000346:	d13c      	bne.n	80003c2 <mbedtls_aes_setkey_enc+0xc2>
    switch (ctx->nr) {
 8000348:	682b      	ldr	r3, [r5, #0]
 800034a:	2b0c      	cmp	r3, #12
 800034c:	d03e      	beq.n	80003cc <mbedtls_aes_setkey_enc+0xcc>
 800034e:	2b0e      	cmp	r3, #14
 8000350:	d075      	beq.n	800043e <mbedtls_aes_setkey_enc+0x13e>
 8000352:	2b0a      	cmp	r3, #10
 8000354:	d12f      	bne.n	80003b6 <mbedtls_aes_setkey_enc+0xb6>
 8000356:	4628      	mov	r0, r5
 8000358:	4d67      	ldr	r5, [pc, #412]	; (80004f8 <mbedtls_aes_setkey_enc+0x1f8>)
 800035a:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
 800035e:	4629      	mov	r1, r5
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 8000360:	6942      	ldr	r2, [r0, #20]
                RK[4]  = RK[0] ^ round_constants[i] ^
 8000362:	f855 4b04 	ldr.w	r4, [r5], #4
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 8000366:	6887      	ldr	r7, [r0, #8]
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 8000368:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800036c:	440b      	add	r3, r1
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 800036e:	407c      	eors	r4, r7
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[3])]) ^
 8000370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 8000374:	4063      	eors	r3, r4
 8000376:	eb01 6412 	add.w	r4, r1, r2, lsr #24
            for (unsigned int i = 0; i < 10; i++, RK += 4) {
 800037a:	3010      	adds	r0, #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 800037c:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 8000380:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[3])] << 24);
 8000384:	fa51 f482 	uxtab	r4, r1, r2
 8000388:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 800038c:	ea83 6304 	eor.w	r3, r3, r4, lsl #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[3])] <<  8) ^
 8000390:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8000394:	440c      	add	r4, r1
 8000396:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[3])] << 16) ^
 800039a:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
                RK[5]  = RK[1] ^ RK[4];
 800039e:	f850 4c04 	ldr.w	r4, [r0, #-4]
                RK[4]  = RK[0] ^ round_constants[i] ^
 80003a2:	6083      	str	r3, [r0, #8]
                RK[5]  = RK[1] ^ RK[4];
 80003a4:	4063      	eors	r3, r4
                RK[6]  = RK[2] ^ RK[5];
 80003a6:	6804      	ldr	r4, [r0, #0]
                RK[5]  = RK[1] ^ RK[4];
 80003a8:	60c3      	str	r3, [r0, #12]
                RK[6]  = RK[2] ^ RK[5];
 80003aa:	4063      	eors	r3, r4
 80003ac:	6103      	str	r3, [r0, #16]
                RK[7]  = RK[3] ^ RK[6];
 80003ae:	4053      	eors	r3, r2
 80003b0:	6143      	str	r3, [r0, #20]
            for (unsigned int i = 0; i < 10; i++, RK += 4) {
 80003b2:	4286      	cmp	r6, r0
 80003b4:	d1d4      	bne.n	8000360 <mbedtls_aes_setkey_enc+0x60>
    switch (ctx->nr) {
 80003b6:	2000      	movs	r0, #0
 80003b8:	e09b      	b.n	80004f2 <mbedtls_aes_setkey_enc+0x1f2>
        case 192: ctx->nr = 12; break;
 80003ba:	230c      	movs	r3, #12
 80003bc:	e7ad      	b.n	800031a <mbedtls_aes_setkey_enc+0x1a>
        case 256: ctx->nr = 14; break;
 80003be:	230e      	movs	r3, #14
 80003c0:	e7ab      	b.n	800031a <mbedtls_aes_setkey_enc+0x1a>
    r = *p32;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    r = p32->x;
#else
    memcpy(&r, p, sizeof(r));
 80003c2:	f851 2b04 	ldr.w	r2, [r1], #4
        RK[i] = MBEDTLS_GET_UINT32_LE(key, i << 2);
 80003c6:	f843 2b04 	str.w	r2, [r3], #4
    for (unsigned int i = 0; i < (keybits >> 5); i++) {
 80003ca:	e7bb      	b.n	8000344 <mbedtls_aes_setkey_enc+0x44>
 80003cc:	494a      	ldr	r1, [pc, #296]	; (80004f8 <mbedtls_aes_setkey_enc+0x1f8>)
 80003ce:	4628      	mov	r0, r5
 80003d0:	f105 04c0 	add.w	r4, r5, #192	; 0xc0
 80003d4:	460a      	mov	r2, r1
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 80003d6:	69c5      	ldr	r5, [r0, #28]
                RK[6]  = RK[0] ^ round_constants[i] ^
 80003d8:	f851 6b04 	ldr.w	r6, [r1], #4
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 80003dc:	6887      	ldr	r7, [r0, #8]
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 80003de:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80003e2:	4413      	add	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 80003e4:	407e      	eors	r6, r7
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[5])]) ^
 80003e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 80003ea:	4073      	eors	r3, r6
 80003ec:	eb02 6615 	add.w	r6, r2, r5, lsr #24
            for (unsigned int i = 0; i < 8; i++, RK += 6) {
 80003f0:	3018      	adds	r0, #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 80003f2:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80003f6:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[5])] << 24);
 80003fa:	fa52 f685 	uxtab	r6, r2, r5
 80003fe:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 8000402:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[5])] <<  8) ^
 8000406:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800040a:	4416      	add	r6, r2
 800040c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[5])] << 16) ^
 8000410:	ea83 2306 	eor.w	r3, r3, r6, lsl #8
                RK[7]  = RK[1] ^ RK[6];
 8000414:	f850 6c0c 	ldr.w	r6, [r0, #-12]
                RK[6]  = RK[0] ^ round_constants[i] ^
 8000418:	6083      	str	r3, [r0, #8]
                RK[7]  = RK[1] ^ RK[6];
 800041a:	4073      	eors	r3, r6
                RK[8]  = RK[2] ^ RK[7];
 800041c:	f850 6c08 	ldr.w	r6, [r0, #-8]
                RK[7]  = RK[1] ^ RK[6];
 8000420:	60c3      	str	r3, [r0, #12]
                RK[8]  = RK[2] ^ RK[7];
 8000422:	4073      	eors	r3, r6
                RK[9]  = RK[3] ^ RK[8];
 8000424:	f850 6c04 	ldr.w	r6, [r0, #-4]
                RK[8]  = RK[2] ^ RK[7];
 8000428:	6103      	str	r3, [r0, #16]
                RK[9]  = RK[3] ^ RK[8];
 800042a:	4073      	eors	r3, r6
                RK[10] = RK[4] ^ RK[9];
 800042c:	6806      	ldr	r6, [r0, #0]
                RK[9]  = RK[3] ^ RK[8];
 800042e:	6143      	str	r3, [r0, #20]
                RK[10] = RK[4] ^ RK[9];
 8000430:	4073      	eors	r3, r6
 8000432:	6183      	str	r3, [r0, #24]
                RK[11] = RK[5] ^ RK[10];
 8000434:	406b      	eors	r3, r5
 8000436:	61c3      	str	r3, [r0, #28]
            for (unsigned int i = 0; i < 8; i++, RK += 6) {
 8000438:	4284      	cmp	r4, r0
 800043a:	d1cc      	bne.n	80003d6 <mbedtls_aes_setkey_enc+0xd6>
 800043c:	e7bb      	b.n	80003b6 <mbedtls_aes_setkey_enc+0xb6>
 800043e:	4628      	mov	r0, r5
 8000440:	4d2d      	ldr	r5, [pc, #180]	; (80004f8 <mbedtls_aes_setkey_enc+0x1f8>)
 8000442:	f100 06e0 	add.w	r6, r0, #224	; 0xe0
 8000446:	4629      	mov	r1, r5
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8000448:	6a44      	ldr	r4, [r0, #36]	; 0x24
                RK[8]  = RK[0] ^ round_constants[i] ^
 800044a:	f855 2b04 	ldr.w	r2, [r5], #4
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 800044e:	6887      	ldr	r7, [r0, #8]
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8000450:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8000454:	440b      	add	r3, r1
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8000456:	407a      	eors	r2, r7
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[7])]) ^
 8000458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 800045c:	6987      	ldr	r7, [r0, #24]
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 800045e:	4053      	eors	r3, r2
 8000460:	eb01 6214 	add.w	r2, r1, r4, lsr #24
            for (unsigned int i = 0; i < 7; i++, RK += 8) {
 8000464:	3020      	adds	r0, #32
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8000466:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800046a:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[7])] << 24);
 800046e:	fa51 f284 	uxtab	r2, r1, r4
 8000472:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8000476:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[7])] <<  8) ^
 800047a:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800047e:	440a      	add	r2, r1
 8000480:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[7])] << 16) ^
 8000484:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 8000488:	f850 2c14 	ldr.w	r2, [r0, #-20]
                RK[8]  = RK[0] ^ round_constants[i] ^
 800048c:	6083      	str	r3, [r0, #8]
                RK[9]  = RK[1] ^ RK[8];
 800048e:	4053      	eors	r3, r2
                RK[10] = RK[2] ^ RK[9];
 8000490:	f850 2c10 	ldr.w	r2, [r0, #-16]
                RK[9]  = RK[1] ^ RK[8];
 8000494:	60c3      	str	r3, [r0, #12]
                RK[10] = RK[2] ^ RK[9];
 8000496:	4053      	eors	r3, r2
                RK[11] = RK[3] ^ RK[10];
 8000498:	f850 2c0c 	ldr.w	r2, [r0, #-12]
                RK[10] = RK[2] ^ RK[9];
 800049c:	6103      	str	r3, [r0, #16]
                RK[11] = RK[3] ^ RK[10];
 800049e:	4053      	eors	r3, r2
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 80004a0:	fa51 f283 	uxtab	r2, r1, r3
                RK[11] = RK[3] ^ RK[10];
 80004a4:	6143      	str	r3, [r0, #20]
                         ((uint32_t) FSb[MBEDTLS_BYTE_0(RK[11])]) ^
 80004a6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 80004aa:	407a      	eors	r2, r7
                         ((uint32_t) FSb[MBEDTLS_BYTE_3(RK[11])] << 24);
 80004ac:	eb01 6713 	add.w	r7, r1, r3, lsr #24
 80004b0:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 80004b4:	ea82 6207 	eor.w	r2, r2, r7, lsl #24
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 80004b8:	f3c3 2707 	ubfx	r7, r3, #8, #8
 80004bc:	440f      	add	r7, r1
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 80004be:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80004c2:	440b      	add	r3, r1
                         ((uint32_t) FSb[MBEDTLS_BYTE_1(RK[11])] <<  8) ^
 80004c4:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                         ((uint32_t) FSb[MBEDTLS_BYTE_2(RK[11])] << 16) ^
 80004c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004cc:	ea82 2207 	eor.w	r2, r2, r7, lsl #8
 80004d0:	ea82 4303 	eor.w	r3, r2, r3, lsl #16
                RK[13] = RK[5] ^ RK[12];
 80004d4:	f850 2c04 	ldr.w	r2, [r0, #-4]
                RK[12] = RK[4] ^
 80004d8:	6183      	str	r3, [r0, #24]
                RK[13] = RK[5] ^ RK[12];
 80004da:	4053      	eors	r3, r2
                RK[14] = RK[6] ^ RK[13];
 80004dc:	6802      	ldr	r2, [r0, #0]
                RK[13] = RK[5] ^ RK[12];
 80004de:	61c3      	str	r3, [r0, #28]
                RK[14] = RK[6] ^ RK[13];
 80004e0:	4053      	eors	r3, r2
 80004e2:	6203      	str	r3, [r0, #32]
                RK[15] = RK[7] ^ RK[14];
 80004e4:	4063      	eors	r3, r4
 80004e6:	6243      	str	r3, [r0, #36]	; 0x24
            for (unsigned int i = 0; i < 7; i++, RK += 8) {
 80004e8:	4286      	cmp	r6, r0
 80004ea:	d1ad      	bne.n	8000448 <mbedtls_aes_setkey_enc+0x148>
 80004ec:	e763      	b.n	80003b6 <mbedtls_aes_setkey_enc+0xb6>
    switch (keybits) {
 80004ee:	f06f 001f 	mvn.w	r0, #31
}
 80004f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f4:	2000118c 	.word	0x2000118c
 80004f8:	20000094 	.word	0x20000094

080004fc <mbedtls_aes_init>:
    memset(ctx, 0, sizeof(mbedtls_aes_context));
 80004fc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000500:	2100      	movs	r1, #0
 8000502:	f001 bb27 	b.w	8001b54 <memset>
 8000506:	0000      	movs	r0, r0

08000508 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt(mbedtls_aes_context *ctx,
                                 const unsigned char input[16],
                                 unsigned char output[16])
{
 8000508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 800050c:	f100 0308 	add.w	r3, r0, #8
 8000510:	6844      	ldr	r4, [r0, #4]
    struct {
        uint32_t X[4];
        uint32_t Y[4];
    } t;

    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8000512:	680e      	ldr	r6, [r1, #0]
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8000514:	684d      	ldr	r5, [r1, #4]
    uint32_t *RK = ctx->buf + ctx->rk_offset;
 8000516:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 800051a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 800051e:	688c      	ldr	r4, [r1, #8]
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8000520:	68c9      	ldr	r1, [r1, #12]
    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8000522:	405e      	eors	r6, r3
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8000524:	f8de 3004 	ldr.w	r3, [lr, #4]
 8000528:	405d      	eors	r5, r3
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 800052a:	f8de 3008 	ldr.w	r3, [lr, #8]
 800052e:	405c      	eors	r4, r3
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8000530:	f8de 300c 	ldr.w	r3, [lr, #12]
 8000534:	4059      	eors	r1, r3

    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8000536:	6803      	ldr	r3, [r0, #0]
{
 8000538:	b08d      	sub	sp, #52	; 0x34
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 800053a:	ea4f 0863 	mov.w	r8, r3, asr #1
 800053e:	4b8e      	ldr	r3, [pc, #568]	; (8000778 <mbedtls_internal_aes_encrypt+0x270>)
    t.X[0] = MBEDTLS_GET_UINT32_LE(input,  0); t.X[0] ^= *RK++;
 8000540:	9604      	str	r6, [sp, #16]
    t.X[1] = MBEDTLS_GET_UINT32_LE(input,  4); t.X[1] ^= *RK++;
 8000542:	9505      	str	r5, [sp, #20]
    t.X[2] = MBEDTLS_GET_UINT32_LE(input,  8); t.X[2] ^= *RK++;
 8000544:	9406      	str	r4, [sp, #24]
    t.X[3] = MBEDTLS_GET_UINT32_LE(input, 12); t.X[3] ^= *RK++;
 8000546:	9107      	str	r1, [sp, #28]
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8000548:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800054c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
 8000550:	2000      	movs	r0, #0
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000552:	e95e a706 	ldrd	sl, r7, [lr, #-24]
 8000556:	9700      	str	r7, [sp, #0]
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8000558:	f85e 7c10 	ldr.w	r7, [lr, #-16]
 800055c:	9701      	str	r7, [sp, #4]
 800055e:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 8000562:	9702      	str	r7, [sp, #8]
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000564:	e95e cb08 	ldrd	ip, fp, [lr, #-32]
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8000568:	f85e 7c08 	ldr.w	r7, [lr, #-8]
 800056c:	9703      	str	r7, [sp, #12]
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 800056e:	f1b8 0f00 	cmp.w	r8, #0
 8000572:	f10e 0e20 	add.w	lr, lr, #32
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8000576:	f85e 9c24 	ldr.w	r9, [lr, #-36]
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 800057a:	f300 80ff 	bgt.w	800077c <mbedtls_internal_aes_encrypt+0x274>
 800057e:	b118      	cbz	r0, 8000588 <mbedtls_internal_aes_encrypt+0x80>
 8000580:	e9cd 6504 	strd	r6, r5, [sp, #16]
 8000584:	e9cd 4106 	strd	r4, r1, [sp, #24]
    }

    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000588:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
 800058c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8000590:	b2e9      	uxtb	r1, r5
 8000592:	0e38      	lsrs	r0, r7, #24
 8000594:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8000598:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800059c:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 80005a0:	f8d0 0d28 	ldr.w	r0, [r0, #3368]	; 0xd28
 80005a4:	4041      	eors	r1, r0
 80005a6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80005aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80005ae:	ea4f 6e14 	mov.w	lr, r4, lsr #24
 80005b2:	f8d0 0528 	ldr.w	r0, [r0, #1320]	; 0x528
 80005b6:	4041      	eors	r1, r0
 80005b8:	f3c6 4007 	ubfx	r0, r6, #16, #8
 80005bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80005c0:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80005c4:	f8d0 0928 	ldr.w	r0, [r0, #2344]	; 0x928
 80005c8:	f8de ed28 	ldr.w	lr, [lr, #3368]	; 0xd28
 80005cc:	4041      	eors	r1, r0
 80005ce:	ea81 010c 	eor.w	r1, r1, ip
 80005d2:	b2e0      	uxtb	r0, r4
 80005d4:	ea4f 6c15 	mov.w	ip, r5, lsr #24
 80005d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80005dc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80005e0:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 80005e4:	f8dc cd28 	ldr.w	ip, [ip, #3368]	; 0xd28
 80005e8:	9108      	str	r1, [sp, #32]
 80005ea:	ea80 000c 	eor.w	r0, r0, ip
 80005ee:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80005f2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80005f6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80005fa:	f8dc c528 	ldr.w	ip, [ip, #1320]	; 0x528
 80005fe:	ea80 000c 	eor.w	r0, r0, ip
 8000602:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8000606:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800060a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800060e:	f8dc c928 	ldr.w	ip, [ip, #2344]	; 0x928
 8000612:	f8d4 4928 	ldr.w	r4, [r4, #2344]	; 0x928
 8000616:	ea80 000c 	eor.w	r0, r0, ip
 800061a:	fa5f fc86 	uxtb.w	ip, r6
 800061e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000622:	0e36      	lsrs	r6, r6, #24
 8000624:	f8dc c128 	ldr.w	ip, [ip, #296]	; 0x128
 8000628:	ea8c 0c0e 	eor.w	ip, ip, lr
 800062c:	f3c7 2e07 	ubfx	lr, r7, #8, #8
 8000630:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8000634:	b2ff      	uxtb	r7, r7
 8000636:	f8de e528 	ldr.w	lr, [lr, #1320]	; 0x528
 800063a:	ea8c 0c0e 	eor.w	ip, ip, lr
 800063e:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8000642:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8000646:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800064a:	f8de e928 	ldr.w	lr, [lr, #2344]	; 0x928
 800064e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8000652:	ea8c 0c0e 	eor.w	ip, ip, lr
 8000656:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800065a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800065e:	f8d7 6128 	ldr.w	r6, [r7, #296]	; 0x128
 8000662:	f8de 7d28 	ldr.w	r7, [lr, #3368]	; 0xd28
 8000666:	f8d5 5528 	ldr.w	r5, [r5, #1320]	; 0x528
 800066a:	407e      	eors	r6, r7
 800066c:	406e      	eors	r6, r5
 800066e:	9d00      	ldr	r5, [sp, #0]

    t.X[0] = *RK++ ^ \
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8000670:	9f01      	ldr	r7, [sp, #4]
    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000672:	4074      	eors	r4, r6
 8000674:	406c      	eors	r4, r5
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 8000676:	eb03 6514 	add.w	r5, r3, r4, lsr #24
    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 800067a:	ea80 000b 	eor.w	r0, r0, fp
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[3])] << 24);
 800067e:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000682:	9009      	str	r0, [sp, #36]	; 0x24
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 8000684:	fa53 f581 	uxtab	r5, r3, r1
    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000688:	ea8c 0c0a 	eor.w	ip, ip, sl
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[0])]) ^
 800068c:	f895 5028 	ldrb.w	r5, [r5, #40]	; 0x28
    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000690:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 8000694:	407d      	eors	r5, r7
 8000696:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 800069a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800069e:	441e      	add	r6, r3
    AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 80006a0:	940b      	str	r4, [sp, #44]	; 0x2c
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[1])] <<  8) ^
 80006a2:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 80006a6:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
 80006aa:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80006ae:	441e      	add	r6, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);

    t.X[3] = *RK++ ^ \
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 80006b0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[2])] << 16) ^
 80006b4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80006b8:	ea85 4806 	eor.w	r8, r5, r6, lsl #16
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 80006bc:	eb03 6611 	add.w	r6, r3, r1, lsr #24
    t.X[0] = *RK++ ^ \
 80006c0:	f8cd 8010 	str.w	r8, [sp, #16]
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[0])] << 24);
 80006c4:	f896 7028 	ldrb.w	r7, [r6, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[1])]) ^
 80006c8:	fa53 f680 	uxtab	r6, r3, r0
 80006cc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 80006d0:	9d02      	ldr	r5, [sp, #8]
 80006d2:	406e      	eors	r6, r5
 80006d4:	ea86 6607 	eor.w	r6, r6, r7, lsl #24
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 80006d8:	f3cc 2707 	ubfx	r7, ip, #8, #8
 80006dc:	441f      	add	r7, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 80006de:	9d03      	ldr	r5, [sp, #12]
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[2])] <<  8) ^
 80006e0:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[3])] << 16) ^
 80006e4:	ea86 2607 	eor.w	r6, r6, r7, lsl #8
 80006e8:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80006ec:	441f      	add	r7, r3
 80006ee:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
 80006f2:	ea86 4607 	eor.w	r6, r6, r7, lsl #16
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[1])] << 24);
 80006f6:	eb03 6710 	add.w	r7, r3, r0, lsr #24
 80006fa:	a804      	add	r0, sp, #16
 80006fc:	f897 e028 	ldrb.w	lr, [r7, #40]	; 0x28
    t.X[1] = *RK++ ^ \
 8000700:	9605      	str	r6, [sp, #20]
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 8000702:	fa53 f78c 	uxtab	r7, r3, ip
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 8000706:	eb03 6c1c 	add.w	ip, r3, ip, lsr #24
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[2])]) ^
 800070a:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_3(t.Y[2])] << 24);
 800070e:	f89c c028 	ldrb.w	ip, [ip, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8000712:	406f      	eors	r7, r5
 8000714:	ea87 670e 	eor.w	r7, r7, lr, lsl #24
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8000718:	f3c4 2e07 	ubfx	lr, r4, #8, #8
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 800071c:	fa53 f484 	uxtab	r4, r3, r4
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8000720:	449e      	add	lr, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_0(t.Y[3])]) ^
 8000722:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[3])] <<  8) ^
 8000726:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 800072a:	ea84 0909 	eor.w	r9, r4, r9
 800072e:	ea89 690c 	eor.w	r9, r9, ip, lsl #24
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8000732:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 8000736:	449c      	add	ip, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8000738:	ea87 270e 	eor.w	r7, r7, lr, lsl #8
 800073c:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 8000740:	449e      	add	lr, r3
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 8000742:	445b      	add	r3, fp
             ((uint32_t) FSb[MBEDTLS_BYTE_1(t.Y[0])] <<  8) ^
 8000744:	f89c 1028 	ldrb.w	r1, [ip, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8000748:	f89e e028 	ldrb.w	lr, [lr, #40]	; 0x28
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 800074c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    *p32 = x;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    p32->x = x;
#else
    memcpy(p, &x, sizeof(x));
 8000750:	f8c2 8000 	str.w	r8, [r2]
 8000754:	ea89 2901 	eor.w	r9, r9, r1, lsl #8
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[0])] << 16) ^
 8000758:	ea87 470e 	eor.w	r7, r7, lr, lsl #16
             ((uint32_t) FSb[MBEDTLS_BYTE_2(t.Y[1])] << 16) ^
 800075c:	ea89 4303 	eor.w	r3, r9, r3, lsl #16
 8000760:	6056      	str	r6, [r2, #4]
 8000762:	6097      	str	r7, [r2, #8]
 8000764:	60d3      	str	r3, [r2, #12]
 8000766:	2120      	movs	r1, #32
    t.X[2] = *RK++ ^ \
 8000768:	9706      	str	r7, [sp, #24]
    t.X[3] = *RK++ ^ \
 800076a:	9307      	str	r3, [sp, #28]
    if (len > 0) {
 800076c:	f7ff fdbe 	bl	80002ec <mbedtls_platform_zeroize.part.0>
    MBEDTLS_PUT_UINT32_LE(t.X[3], output, 12);

    mbedtls_platform_zeroize(&t, sizeof(t));

    return 0;
}
 8000770:	2000      	movs	r0, #0
 8000772:	b00d      	add	sp, #52	; 0x34
 8000774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000778:	20000094 	.word	0x20000094
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 800077c:	b2f7      	uxtb	r7, r6
 800077e:	0e08      	lsrs	r0, r1, #24
 8000780:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000784:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000788:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800078c:	f8d0 0d28 	ldr.w	r0, [r0, #3368]	; 0xd28
 8000790:	4078      	eors	r0, r7
 8000792:	ea80 0c0c 	eor.w	ip, r0, ip
 8000796:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800079a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800079e:	0e37      	lsrs	r7, r6, #24
 80007a0:	f8d0 0528 	ldr.w	r0, [r0, #1320]	; 0x528
 80007a4:	ea8c 0c00 	eor.w	ip, ip, r0
 80007a8:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80007ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80007b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80007b4:	f8d0 0928 	ldr.w	r0, [r0, #2344]	; 0x928
 80007b8:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 80007bc:	ea8c 0c00 	eor.w	ip, ip, r0
 80007c0:	b2e8      	uxtb	r0, r5
 80007c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 80007c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 80007ca:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
 80007ce:	4078      	eors	r0, r7
 80007d0:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80007d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80007d8:	ea80 000b 	eor.w	r0, r0, fp
 80007dc:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 80007e0:	4078      	eors	r0, r7
 80007e2:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80007e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80007ea:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80007ee:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 80007f2:	4078      	eors	r0, r7
 80007f4:	b2e7      	uxtb	r7, r4
 80007f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80007fa:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 80007fe:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 8000802:	f8db bd28 	ldr.w	fp, [fp, #3368]	; 0xd28
 8000806:	ea87 0b0b 	eor.w	fp, r7, fp
 800080a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 800080e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000812:	b2c9      	uxtb	r1, r1
 8000814:	0e24      	lsrs	r4, r4, #24
 8000816:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800081a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800081e:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 8000822:	f8d4 4d28 	ldr.w	r4, [r4, #3368]	; 0xd28
 8000826:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 800082a:	ea8b 0a0a 	eor.w	sl, fp, sl
 800082e:	ea8a 0a07 	eor.w	sl, sl, r7
 8000832:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8000836:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800083a:	4061      	eors	r1, r4
 800083c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000840:	9c00      	ldr	r4, [sp, #0]
 8000842:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8000846:	4061      	eors	r1, r4
 8000848:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800084c:	f8d6 4528 	ldr.w	r4, [r6, #1320]	; 0x528
 8000850:	4061      	eors	r1, r4
 8000852:	f8d5 4928 	ldr.w	r4, [r5, #2344]	; 0x928
 8000856:	4061      	eors	r1, r4
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8000858:	fa5f f58c 	uxtb.w	r5, ip
 800085c:	0e0c      	lsrs	r4, r1, #24
 800085e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8000862:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8000866:	f8d5 6128 	ldr.w	r6, [r5, #296]	; 0x128
 800086a:	f8d4 4d28 	ldr.w	r4, [r4, #3368]	; 0xd28
 800086e:	4066      	eors	r6, r4
 8000870:	9c01      	ldr	r4, [sp, #4]
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000872:	eb03 0787 	add.w	r7, r3, r7, lsl #2
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8000876:	4066      	eors	r6, r4
 8000878:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800087c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000880:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 8000884:	f8d4 4528 	ldr.w	r4, [r4, #1320]	; 0x528
        AES_FROUND(t.Y[0], t.Y[1], t.Y[2], t.Y[3], t.X[0], t.X[1], t.X[2], t.X[3]);
 8000888:	ea8a 0a07 	eor.w	sl, sl, r7
        AES_FROUND(t.X[0], t.X[1], t.X[2], t.X[3], t.Y[0], t.Y[1], t.Y[2], t.Y[3]);
 800088c:	4066      	eors	r6, r4
 800088e:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8000892:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8000896:	b2c5      	uxtb	r5, r0
 8000898:	f8d4 4928 	ldr.w	r4, [r4, #2344]	; 0x928
 800089c:	4066      	eors	r6, r4
 800089e:	ea4f 641c 	mov.w	r4, ip, lsr #24
 80008a2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80008a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80008aa:	f8d5 5128 	ldr.w	r5, [r5, #296]	; 0x128
 80008ae:	f8d4 4d28 	ldr.w	r4, [r4, #3368]	; 0xd28
 80008b2:	4065      	eors	r5, r4
 80008b4:	9c02      	ldr	r4, [sp, #8]
 80008b6:	4065      	eors	r5, r4
 80008b8:	f3ca 2407 	ubfx	r4, sl, #8, #8
 80008bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80008c0:	0e07      	lsrs	r7, r0, #24
 80008c2:	f8d4 4528 	ldr.w	r4, [r4, #1320]	; 0x528
 80008c6:	4065      	eors	r5, r4
 80008c8:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80008cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80008d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80008d4:	f8d4 4928 	ldr.w	r4, [r4, #2344]	; 0x928
 80008d8:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 80008dc:	4065      	eors	r5, r4
 80008de:	fa5f f48a 	uxtb.w	r4, sl
 80008e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80008e6:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80008ea:	f8d4 4128 	ldr.w	r4, [r4, #296]	; 0x128
 80008ee:	407c      	eors	r4, r7
 80008f0:	9f03      	ldr	r7, [sp, #12]
 80008f2:	407c      	eors	r4, r7
 80008f4:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80008f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80008fc:	b2c9      	uxtb	r1, r1
 80008fe:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 8000902:	407c      	eors	r4, r7
 8000904:	f3cc 4707 	ubfx	r7, ip, #16, #8
 8000908:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800090c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8000910:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 8000914:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 8000918:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800091c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8000920:	407c      	eors	r4, r7
 8000922:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8000926:	f8da 7d28 	ldr.w	r7, [sl, #3368]	; 0xd28
 800092a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800092e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000932:	4079      	eors	r1, r7
 8000934:	f8dc 7528 	ldr.w	r7, [ip, #1320]	; 0x528
 8000938:	f8d0 0928 	ldr.w	r0, [r0, #2344]	; 0x928
 800093c:	ea81 0109 	eor.w	r1, r1, r9
 8000940:	4079      	eors	r1, r7
 8000942:	4041      	eors	r1, r0
    for (i = (ctx->nr >> 1) - 1; i > 0; i--) {
 8000944:	2001      	movs	r0, #1
 8000946:	e604      	b.n	8000552 <mbedtls_internal_aes_encrypt+0x4a>

08000948 <fault_and_encrypt>:
unsigned char key[16] = {0x5b, 0x12, 0xa4, 0x7f, 0x2b, 0x55, 0x71, 0x19, 
                         0x1e, 0xc0, 0x6d, 0x7c, 0x02, 0xfc, 0x60, 0x76};
mbedtls_aes_context ctx;
static int aes_ctx_done = 0;

uint8_t fault_and_encrypt(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* indata){
 8000948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    if (aes_ctx_done == 0){
 800094a:	4d18      	ldr	r5, [pc, #96]	; (80009ac <fault_and_encrypt+0x64>)
uint8_t fault_and_encrypt(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t* indata){
 800094c:	461c      	mov	r4, r3
    if (aes_ctx_done == 0){
 800094e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000950:	b95b      	cbnz	r3, 800096a <fault_and_encrypt+0x22>
        mbedtls_aes_init(&ctx);
 8000952:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8000956:	f7ff fdd1 	bl	80004fc <mbedtls_aes_init>
        mbedtls_aes_setkey_enc(&ctx, key, 128);
 800095a:	4915      	ldr	r1, [pc, #84]	; (80009b0 <fault_and_encrypt+0x68>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8000962:	f7ff fccd 	bl	8000300 <mbedtls_aes_setkey_enc>
        aes_ctx_done = 1;        
 8000966:	2301      	movs	r3, #1
 8000968:	63ab      	str	r3, [r5, #56]	; 0x38

    int ret = 0, mode=MBEDTLS_AES_ENCRYPT;
    unsigned char buf[16];

    for (int i = 0; i < 16; i++){
        buf[i] = indata[i];
 800096a:	4623      	mov	r3, r4
 800096c:	466c      	mov	r4, sp
 800096e:	f103 0210 	add.w	r2, r3, #16
 8000972:	4626      	mov	r6, r4
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	6859      	ldr	r1, [r3, #4]
 8000978:	4625      	mov	r5, r4
 800097a:	c503      	stmia	r5!, {r0, r1}
 800097c:	3308      	adds	r3, #8
 800097e:	4293      	cmp	r3, r2
 8000980:	462c      	mov	r4, r5
 8000982:	d1f7      	bne.n	8000974 <fault_and_encrypt+0x2c>
        return mbedtls_internal_aes_encrypt(ctx, input, output);
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <fault_and_encrypt+0x6c>)
 8000986:	4632      	mov	r2, r6
 8000988:	4631      	mov	r1, r6
 800098a:	f7ff fdbd 	bl	8000508 <mbedtls_internal_aes_encrypt>
    }

    ret = mbedtls_aes_crypt_ecb(&ctx, mode, buf, buf);
    if (ret != 0) {
 800098e:	4604      	mov	r4, r0
 8000990:	b128      	cbz	r0, 800099e <fault_and_encrypt+0x56>
        printf("[FAILED] ECB encryption!\n");
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <fault_and_encrypt+0x70>)
 8000994:	f001 f954 	bl	8001c40 <puts>
        return ret;
 8000998:	b2e0      	uxtb	r0, r4
    }
    simpleserial_put('r', 16, buf);
    return 0;
}
 800099a:	b004      	add	sp, #16
 800099c:	bd70      	pop	{r4, r5, r6, pc}
    simpleserial_put('r', 16, buf);
 800099e:	2072      	movs	r0, #114	; 0x72
 80009a0:	4632      	mov	r2, r6
 80009a2:	2110      	movs	r1, #16
 80009a4:	f000 f89e 	bl	8000ae4 <simpleserial_put>
    return 0;
 80009a8:	4620      	mov	r0, r4
 80009aa:	e7f6      	b.n	800099a <fault_and_encrypt+0x52>
 80009ac:	2000118c 	.word	0x2000118c
 80009b0:	20000004 	.word	0x20000004
 80009b4:	200011c8 	.word	0x200011c8
 80009b8:	080025cf 	.word	0x080025cf

080009bc <main>:

int main(void)
{
 80009bc:	b508      	push	{r3, lr}
    platform_init();
 80009be:	f000 f957 	bl	8000c70 <platform_init>
    init_uart();
 80009c2:	f000 f995 	bl	8000cf0 <init_uart>
    trigger_setup();
 80009c6:	f000 f9d1 	bl	8000d6c <trigger_setup>

    /* Device reset detected */
    putch('r');
 80009ca:	2072      	movs	r0, #114	; 0x72
 80009cc:	f000 fa1a 	bl	8000e04 <putch>
    putch('R');
 80009d0:	2052      	movs	r0, #82	; 0x52
 80009d2:	f000 fa17 	bl	8000e04 <putch>
    putch('E');
 80009d6:	2045      	movs	r0, #69	; 0x45
 80009d8:	f000 fa14 	bl	8000e04 <putch>
    putch('S');
 80009dc:	2053      	movs	r0, #83	; 0x53
 80009de:	f000 fa11 	bl	8000e04 <putch>
    putch('E');
 80009e2:	2045      	movs	r0, #69	; 0x45
 80009e4:	f000 fa0e 	bl	8000e04 <putch>
    putch('T');
 80009e8:	2054      	movs	r0, #84	; 0x54
 80009ea:	f000 fa0b 	bl	8000e04 <putch>
    putch(' ');
 80009ee:	2020      	movs	r0, #32
 80009f0:	f000 fa08 	bl	8000e04 <putch>
    putch(' ');
 80009f4:	2020      	movs	r0, #32
 80009f6:	f000 fa05 	bl	8000e04 <putch>
    putch(' ');
 80009fa:	2020      	movs	r0, #32
 80009fc:	f000 fa02 	bl	8000e04 <putch>
    putch('\n');
 8000a00:	200a      	movs	r0, #10
 8000a02:	f000 f9ff 	bl	8000e04 <putch>

    simpleserial_init();
 8000a06:	f000 f85b 	bl	8000ac0 <simpleserial_init>
    simpleserial_addcmd('a', 16, fault_and_encrypt);  
 8000a0a:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <main+0x60>)
 8000a0c:	2110      	movs	r1, #16
 8000a0e:	2061      	movs	r0, #97	; 0x61
 8000a10:	f000 f83c 	bl	8000a8c <simpleserial_addcmd>

    while(1)
        simpleserial_get();
 8000a14:	f000 f8be 	bl	8000b94 <simpleserial_get>
    while(1)
 8000a18:	e7fc      	b.n	8000a14 <main+0x58>
 8000a1a:	bf00      	nop
 8000a1c:	08000949 	.word	0x08000949

08000a20 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8000a20:	4603      	mov	r3, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8000a22:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8000a24:	2000      	movs	r0, #0
	while (len--) {
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d100      	bne.n	8000a2c <ss_crc+0xc>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8000a2a:	4770      	bx	lr
		crc ^= *buf++;
 8000a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a30:	4050      	eors	r0, r2
 8000a32:	2208      	movs	r2, #8
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000a34:	f010 0f80 	tst.w	r0, #128	; 0x80
 8000a38:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8000a3c:	bf18      	it	ne
 8000a3e:	f080 004d 	eorne.w	r0, r0, #77	; 0x4d
		for (k = 0; k < 8; k++) {
 8000a42:	3a01      	subs	r2, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000a44:	b2c0      	uxtb	r0, r0
		for (k = 0; k < 8; k++) {
 8000a46:	d1f5      	bne.n	8000a34 <ss_crc+0x14>
 8000a48:	e7ed      	b.n	8000a26 <ss_crc+0x6>

08000a4a <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8000a4a:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4604      	mov	r4, r0
	uint8_t i = 1;
 8000a50:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d301      	bcc.n	8000a5a <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8000a56:	2000      	movs	r0, #0
 8000a58:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8000a5a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8000a5e:	b915      	cbnz	r5, 8000a66 <stuff_data+0x1c>
			buf[last] = i - last;
 8000a60:	1a9d      	subs	r5, r3, r2
 8000a62:	5485      	strb	r5, [r0, r2]
 8000a64:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8000a66:	3301      	adds	r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	e7f2      	b.n	8000a52 <stuff_data+0x8>

08000a6c <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8000a6c:	b510      	push	{r4, lr}
	uint8_t next = buf[0];
 8000a6e:	7802      	ldrb	r2, [r0, #0]
	buf[0] = 0x00;
 8000a70:	2400      	movs	r4, #0
{
 8000a72:	4603      	mov	r3, r0
	buf[0] = 0x00;
 8000a74:	7004      	strb	r4, [r0, #0]
	uint8_t next = buf[0];
 8000a76:	4610      	mov	r0, r2
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	d200      	bcs.n	8000a7e <unstuff_data+0x12>
 8000a7c:	b902      	cbnz	r2, 8000a80 <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 8000a7e:	bd10      	pop	{r4, pc}
		tmp = buf[next];
 8000a80:	5c1a      	ldrb	r2, [r3, r0]
		buf[next] = FRAME_BYTE;
 8000a82:	541c      	strb	r4, [r3, r0]
		next += tmp;
 8000a84:	4410      	add	r0, r2
 8000a86:	b2c0      	uxtb	r0, r0
 8000a88:	e7f6      	b.n	8000a78 <unstuff_data+0xc>
 8000a8a:	0000      	movs	r0, r0

08000a8c <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8000a8c:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8000a8e:	4d0b      	ldr	r5, [pc, #44]	; (8000abc <simpleserial_addcmd+0x30>)
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	dd04      	ble.n	8000aa0 <simpleserial_addcmd+0x14>
		putch('a');
 8000a96:	2061      	movs	r0, #97	; 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8000a98:	f000 f9b4 	bl	8000e04 <putch>
		return 1;
 8000a9c:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 8000aa0:	29ff      	cmp	r1, #255	; 0xff
 8000aa2:	d901      	bls.n	8000aa8 <simpleserial_addcmd+0x1c>
		putch('b');
 8000aa4:	2062      	movs	r0, #98	; 0x62
 8000aa6:	e7f7      	b.n	8000a98 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8000aa8:	240c      	movs	r4, #12
 8000aaa:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 8000aae:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8000ab0:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8000ab2:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8000ab6:	602b      	str	r3, [r5, #0]
	return 0;
 8000ab8:	2000      	movs	r0, #0
 8000aba:	e7f0      	b.n	8000a9e <simpleserial_addcmd+0x12>
 8000abc:	200012e0 	.word	0x200012e0

08000ac0 <simpleserial_init>:
{
 8000ac0:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <simpleserial_init+0x1c>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2076      	movs	r0, #118	; 0x76
 8000ac8:	f7ff ffe0 	bl	8000a8c <simpleserial_addcmd>
}
 8000acc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <simpleserial_init+0x20>)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2077      	movs	r0, #119	; 0x77
 8000ad6:	f7ff bfd9 	b.w	8000a8c <simpleserial_addcmd>
 8000ada:	bf00      	nop
 8000adc:	08000b3b 	.word	0x08000b3b
 8000ae0:	08000b59 	.word	0x08000b59

08000ae4 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	b0c0      	sub	sp, #256	; 0x100
 8000ae8:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8000aea:	2500      	movs	r5, #0
{
 8000aec:	4611      	mov	r1, r2
	data_buf[1] = c;
 8000aee:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8000af2:	4622      	mov	r2, r4
 8000af4:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8000af8:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8000afc:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8000b00:	f001 f81a 	bl	8001b38 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8000b04:	1ca1      	adds	r1, r4, #2
 8000b06:	b2c9      	uxtb	r1, r1
 8000b08:	f10d 0001 	add.w	r0, sp, #1
 8000b0c:	f7ff ff88 	bl	8000a20 <ss_crc>
 8000b10:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8000b14:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8000b16:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8000b18:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8000b1a:	b2c9      	uxtb	r1, r1
 8000b1c:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 8000b1e:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8000b22:	f7ff ff92 	bl	8000a4a <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8000b26:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8000b28:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8000b2c:	3501      	adds	r5, #1
		putch(data_buf[i]);
 8000b2e:	f000 f969 	bl	8000e04 <putch>
	for (int i = 0; i < size + 5; i++) {
 8000b32:	42ae      	cmp	r6, r5
 8000b34:	daf8      	bge.n	8000b28 <simpleserial_put+0x44>
	}
}
 8000b36:	b040      	add	sp, #256	; 0x100
 8000b38:	bd70      	pop	{r4, r5, r6, pc}

08000b3a <check_version>:
{
 8000b3a:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 8000b3c:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 8000b3e:	f10d 0207 	add.w	r2, sp, #7
 8000b42:	2101      	movs	r1, #1
 8000b44:	2072      	movs	r0, #114	; 0x72
	uint8_t ver = SS_VER;
 8000b46:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 8000b4a:	f7ff ffcb 	bl	8000ae4 <simpleserial_put>
}
 8000b4e:	2000      	movs	r0, #0
 8000b50:	b003      	add	sp, #12
 8000b52:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b56:	0000      	movs	r0, r0

08000b58 <ss_get_commands>:
{
 8000b58:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <ss_get_commands+0x38>)
 8000b5c:	7801      	ldrb	r1, [r0, #0]
{
 8000b5e:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000b60:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 8000b62:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000b64:	b2d3      	uxtb	r3, r2
 8000b66:	428b      	cmp	r3, r1
 8000b68:	f102 0201 	add.w	r2, r2, #1
 8000b6c:	db06      	blt.n	8000b7c <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8000b6e:	466a      	mov	r2, sp
 8000b70:	2072      	movs	r0, #114	; 0x72
 8000b72:	f7ff ffb7 	bl	8000ae4 <simpleserial_put>
}
 8000b76:	2000      	movs	r0, #0
 8000b78:	b005      	add	sp, #20
 8000b7a:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 8000b7c:	f103 0510 	add.w	r5, r3, #16
 8000b80:	fb04 0303 	mla	r3, r4, r3, r0
 8000b84:	446d      	add	r5, sp
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000b8c:	e7ea      	b.n	8000b64 <ss_get_commands+0xc>
 8000b8e:	bf00      	nop
 8000b90:	200012e0 	.word	0x200012e0

08000b94 <simpleserial_get>:
{
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	b0c2      	sub	sp, #264	; 0x108
	uint8_t err = 0;
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	ae02      	add	r6, sp, #8
 8000b9e:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 8000ba2:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8000ba4:	f000 f914 	bl	8000dd0 <getch>
 8000ba8:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 8000bac:	b958      	cbnz	r0, 8000bc6 <simpleserial_get+0x32>
			err = SS_ERR_FRAME_BYTE;
 8000bae:	2305      	movs	r3, #5
		err = SS_ERR_CRC;
 8000bb0:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 8000bb4:	f10d 0207 	add.w	r2, sp, #7
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2065      	movs	r0, #101	; 0x65
 8000bbc:	f7ff ff92 	bl	8000ae4 <simpleserial_put>
}
 8000bc0:	b042      	add	sp, #264	; 0x108
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8000bc6:	3501      	adds	r5, #1
 8000bc8:	2d04      	cmp	r5, #4
 8000bca:	d1eb      	bne.n	8000ba4 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000bcc:	4629      	mov	r1, r5
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f7ff ff4c 	bl	8000a6c <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8000bd4:	4f25      	ldr	r7, [pc, #148]	; (8000c6c <simpleserial_get+0xd8>)
		if(commands[c].c == data_buf[1])
 8000bd6:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8000bd8:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000bda:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8000bdc:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 8000bde:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8000be0:	fa5f f983 	uxtb.w	r9, r3
 8000be4:	4591      	cmp	r9, r2
 8000be6:	db02      	blt.n	8000bee <simpleserial_get+0x5a>
	if (c == num_commands) {
 8000be8:	d107      	bne.n	8000bfa <simpleserial_get+0x66>
		err = SS_ERR_CMD;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e7e0      	b.n	8000bb0 <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8000bee:	fb00 7609 	mla	r6, r0, r9, r7
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	7936      	ldrb	r6, [r6, #4]
 8000bf6:	428e      	cmp	r6, r1
 8000bf8:	d1f2      	bne.n	8000be0 <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8000bfa:	78e3      	ldrb	r3, [r4, #3]
 8000bfc:	3305      	adds	r3, #5
 8000bfe:	4543      	cmp	r3, r8
 8000c00:	da02      	bge.n	8000c08 <simpleserial_get+0x74>
		err = SS_ERR_LEN;
 8000c02:	2304      	movs	r3, #4
 8000c04:	e7d4      	b.n	8000bb0 <simpleserial_get+0x1c>
 8000c06:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8000c08:	f000 f8e2 	bl	8000dd0 <getch>
 8000c0c:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d0cd      	beq.n	8000bae <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 8000c12:	78e3      	ldrb	r3, [r4, #3]
 8000c14:	1c6e      	adds	r6, r5, #1
 8000c16:	3304      	adds	r3, #4
 8000c18:	42b3      	cmp	r3, r6
 8000c1a:	daf4      	bge.n	8000c06 <simpleserial_get+0x72>
	data_buf[i] = getch();
 8000c1c:	f000 f8d8 	bl	8000dd0 <getch>
 8000c20:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8000c22:	2800      	cmp	r0, #0
 8000c24:	d1ed      	bne.n	8000c02 <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8000c26:	f1c8 0101 	rsb	r1, r8, #1
 8000c2a:	fa51 f186 	uxtab	r1, r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	fa5f fa86 	uxtb.w	sl, r6
 8000c34:	eb04 0008 	add.w	r0, r4, r8
 8000c38:	f7ff ff18 	bl	8000a6c <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8000c3c:	f1aa 0102 	sub.w	r1, sl, #2
 8000c40:	b2c9      	uxtb	r1, r1
 8000c42:	f10d 0009 	add.w	r0, sp, #9
 8000c46:	f7ff feeb 	bl	8000a20 <ss_crc>
	if (crc != data_buf[i-1]) {
 8000c4a:	5d63      	ldrb	r3, [r4, r5]
 8000c4c:	4283      	cmp	r3, r0
 8000c4e:	d001      	beq.n	8000c54 <simpleserial_get+0xc0>
		err = SS_ERR_CRC;
 8000c50:	2302      	movs	r3, #2
 8000c52:	e7ad      	b.n	8000bb0 <simpleserial_get+0x1c>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8000c54:	230c      	movs	r3, #12
 8000c56:	fb03 7709 	mla	r7, r3, r9, r7
 8000c5a:	78e2      	ldrb	r2, [r4, #3]
 8000c5c:	68fd      	ldr	r5, [r7, #12]
 8000c5e:	78a1      	ldrb	r1, [r4, #2]
 8000c60:	7860      	ldrb	r0, [r4, #1]
 8000c62:	446b      	add	r3, sp
 8000c64:	47a8      	blx	r5
 8000c66:	f88d 0007 	strb.w	r0, [sp, #7]
 8000c6a:	e7a3      	b.n	8000bb4 <simpleserial_get+0x20>
 8000c6c:	200012e0 	.word	0x200012e0

08000c70 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000c74:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000c76:	2603      	movs	r6, #3
 8000c78:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000c7c:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000c7e:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000c80:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000c84:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000c86:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000c88:	f000 f8d4 	bl	8000e34 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000c8c:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000c8e:	4621      	mov	r1, r4
 8000c90:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000c92:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c96:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000c9c:	f000 fb38 	bl	8001310 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <platform_init+0x78>)
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000cac:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000cb4:	4c0d      	ldr	r4, [pc, #52]	; (8000cec <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000cba:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000cbc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000cc0:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000cc2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000cc6:	f000 fbc9 	bl	800145c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000cca:	462a      	mov	r2, r5
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd2:	f000 fc87 	bl	80015e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000cd6:	462a      	mov	r2, r5
 8000cd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f000 fc81 	bl	80015e4 <HAL_GPIO_WritePin>
#endif
}
 8000ce2:	b016      	add	sp, #88	; 0x58
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000800 	.word	0x48000800

08000cf0 <init_uart>:

void init_uart(void)
{
 8000cf0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000cf2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 8000cf6:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2101      	movs	r1, #1
 8000d00:	2303      	movs	r3, #3
 8000d02:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000d06:	4c16      	ldr	r4, [pc, #88]	; (8000d60 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000d0c:	6963      	ldr	r3, [r4, #20]
 8000d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d12:	6163      	str	r3, [r4, #20]
 8000d14:	6963      	ldr	r3, [r4, #20]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000d1c:	a903      	add	r1, sp, #12
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000d22:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000d24:	f000 fb9a 	bl	800145c <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8000d2a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8000d68 <init_uart+0x78>
 8000d2e:	f44f 3361 	mov.w	r3, #230400	; 0x38400
 8000d32:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000d38:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000d3c:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000d3e:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000d40:	230c      	movs	r3, #12
 8000d42:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000d44:	69a3      	ldr	r3, [r4, #24]
 8000d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4a:	61a3      	str	r3, [r4, #24]
 8000d4c:	69a3      	ldr	r3, [r4, #24]
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000d56:	f000 fd99 	bl	800188c <HAL_UART_Init>
}
 8000d5a:	b008      	add	sp, #32
 8000d5c:	bd10      	pop	{r4, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000
 8000d64:	200013a4 	.word	0x200013a4
 8000d68:	40013800 	.word	0x40013800

08000d6c <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <trigger_setup+0x44>)
{
 8000d6e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	695b      	ldr	r3, [r3, #20]
{
 8000d7a:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000d84:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	2500      	movs	r5, #0
 8000d90:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000d92:	a901      	add	r1, sp, #4
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d98:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000d9c:	f000 fb5e 	bl	800145c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000da0:	462a      	mov	r2, r5
 8000da2:	4621      	mov	r1, r4
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f000 fc1c 	bl	80015e4 <HAL_GPIO_WritePin>
}
 8000dac:	b007      	add	sp, #28
 8000dae:	bd30      	pop	{r4, r5, pc}
 8000db0:	40021000 	.word	0x40021000

08000db4 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f000 bc11 	b.w	80015e4 <HAL_GPIO_WritePin>

08000dc2 <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f000 bc0a 	b.w	80015e4 <HAL_GPIO_WritePin>

08000dd0 <getch>:
}

char getch(void)
{
 8000dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000dd2:	4d0a      	ldr	r5, [pc, #40]	; (8000dfc <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	; (8000e00 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000dd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f10d 0107 	add.w	r1, sp, #7
 8000de0:	4628      	mov	r0, r5
 8000de2:	f000 fdd4 	bl	800198e <HAL_UART_Receive>
 8000de6:	b918      	cbnz	r0, 8000df0 <getch+0x20>
  //putch(d);
  return d;
}
 8000de8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000dec:	b003      	add	sp, #12
 8000dee:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8000df0:	6a23      	ldr	r3, [r4, #32]
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	6223      	str	r3, [r4, #32]
 8000df8:	e7ed      	b.n	8000dd6 <getch+0x6>
 8000dfa:	bf00      	nop
 8000dfc:	200013a4 	.word	0x200013a4
 8000e00:	40013800 	.word	0x40013800

08000e04 <putch>:

void putch(char c)
{
 8000e04:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000e06:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000e0a:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f10d 0107 	add.w	r1, sp, #7
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <putch+0x1c>)
 8000e16:	f000 fd64 	bl	80018e2 <HAL_UART_Transmit>
}
 8000e1a:	b003      	add	sp, #12
 8000e1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e20:	200013a4 	.word	0x200013a4

08000e24 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000e24:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <HAL_GetTick+0xc>)
 8000e26:	6818      	ldr	r0, [r3, #0]
 8000e28:	1c42      	adds	r2, r0, #1
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20001414 	.word	0x20001414

08000e34 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e34:	6803      	ldr	r3, [r0, #0]
{
 8000e36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3a:	07d9      	lsls	r1, r3, #31
{
 8000e3c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3e:	d411      	bmi.n	8000e64 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	079a      	lsls	r2, r3, #30
 8000e44:	f100 8086 	bmi.w	8000f54 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	071e      	lsls	r6, r3, #28
 8000e4c:	f100 80f4 	bmi.w	8001038 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	075d      	lsls	r5, r3, #29
 8000e54:	f100 8140 	bmi.w	80010d8 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e58:	69e2      	ldr	r2, [r4, #28]
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	f040 81cb 	bne.w	80011f6 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e60:	2000      	movs	r0, #0
 8000e62:	e021      	b.n	8000ea8 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e64:	499a      	ldr	r1, [pc, #616]	; (80010d0 <HAL_RCC_OscConfig+0x29c>)
 8000e66:	684b      	ldr	r3, [r1, #4]
 8000e68:	f003 030c 	and.w	r3, r3, #12
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d007      	beq.n	8000e80 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e70:	684b      	ldr	r3, [r1, #4]
 8000e72:	f003 030c 	and.w	r3, r3, #12
 8000e76:	2b08      	cmp	r3, #8
 8000e78:	d119      	bne.n	8000eae <HAL_RCC_OscConfig+0x7a>
 8000e7a:	684b      	ldr	r3, [r1, #4]
 8000e7c:	03db      	lsls	r3, r3, #15
 8000e7e:	d516      	bpl.n	8000eae <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e84:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	6809      	ldr	r1, [r1, #0]
 8000e8a:	fa93 f3a3 	rbit	r3, r3
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	2201      	movs	r2, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	420b      	tst	r3, r1
 8000e9e:	d0cf      	beq.n	8000e40 <HAL_RCC_OscConfig+0xc>
 8000ea0:	6863      	ldr	r3, [r4, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1cc      	bne.n	8000e40 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ea6:	2001      	movs	r0, #1
}
 8000ea8:	b002      	add	sp, #8
 8000eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	6862      	ldr	r2, [r4, #4]
 8000eb0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000eb4:	d124      	bne.n	8000f00 <HAL_RCC_OscConfig+0xcc>
 8000eb6:	680b      	ldr	r3, [r1, #0]
 8000eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ebc:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ebe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000ec0:	68a0      	ldr	r0, [r4, #8]
 8000ec2:	f023 030f 	bic.w	r3, r3, #15
 8000ec6:	4303      	orrs	r3, r0
 8000ec8:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eca:	b34a      	cbz	r2, 8000f20 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000ecc:	f7ff ffaa 	bl	8000e24 <HAL_GetTick>
 8000ed0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000ed4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed6:	2701      	movs	r7, #1
 8000ed8:	fa96 f3a6 	rbit	r3, r6
 8000edc:	680a      	ldr	r2, [r1, #0]
 8000ede:	fa96 f3a6 	rbit	r3, r6
 8000ee2:	fab3 f383 	clz	r3, r3
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	fa07 f303 	lsl.w	r3, r7, r3
 8000eee:	4213      	tst	r3, r2
 8000ef0:	d1a6      	bne.n	8000e40 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef2:	f7ff ff97 	bl	8000e24 <HAL_GetTick>
 8000ef6:	1b40      	subs	r0, r0, r5
 8000ef8:	2864      	cmp	r0, #100	; 0x64
 8000efa:	d9ed      	bls.n	8000ed8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000efc:	2003      	movs	r0, #3
 8000efe:	e7d3      	b.n	8000ea8 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f00:	680b      	ldr	r3, [r1, #0]
 8000f02:	b932      	cbnz	r2, 8000f12 <HAL_RCC_OscConfig+0xde>
 8000f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f08:	600b      	str	r3, [r1, #0]
 8000f0a:	680b      	ldr	r3, [r1, #0]
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f10:	e7d4      	b.n	8000ebc <HAL_RCC_OscConfig+0x88>
 8000f12:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f16:	d1f5      	bne.n	8000f04 <HAL_RCC_OscConfig+0xd0>
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	600b      	str	r3, [r1, #0]
 8000f1e:	e7ca      	b.n	8000eb6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000f20:	f7ff ff80 	bl	8000e24 <HAL_GetTick>
 8000f24:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	2701      	movs	r7, #1
 8000f2c:	fa96 f3a6 	rbit	r3, r6
 8000f30:	680a      	ldr	r2, [r1, #0]
 8000f32:	fa96 f3a6 	rbit	r3, r6
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	fa07 f303 	lsl.w	r3, r7, r3
 8000f42:	4213      	tst	r3, r2
 8000f44:	f43f af7c 	beq.w	8000e40 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff ff6c 	bl	8000e24 <HAL_GetTick>
 8000f4c:	1b40      	subs	r0, r0, r5
 8000f4e:	2864      	cmp	r0, #100	; 0x64
 8000f50:	d9ec      	bls.n	8000f2c <HAL_RCC_OscConfig+0xf8>
 8000f52:	e7d3      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f54:	495e      	ldr	r1, [pc, #376]	; (80010d0 <HAL_RCC_OscConfig+0x29c>)
 8000f56:	684b      	ldr	r3, [r1, #4]
 8000f58:	f013 0f0c 	tst.w	r3, #12
 8000f5c:	d007      	beq.n	8000f6e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f5e:	684b      	ldr	r3, [r1, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d121      	bne.n	8000fac <HAL_RCC_OscConfig+0x178>
 8000f68:	684b      	ldr	r3, [r1, #4]
 8000f6a:	03df      	lsls	r7, r3, #15
 8000f6c:	d41e      	bmi.n	8000fac <HAL_RCC_OscConfig+0x178>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f74:	6808      	ldr	r0, [r1, #0]
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	fab3 f383 	clz	r3, r3
 8000f7e:	f003 031f 	and.w	r3, r3, #31
 8000f82:	2201      	movs	r2, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	4203      	tst	r3, r0
 8000f8a:	d002      	beq.n	8000f92 <HAL_RCC_OscConfig+0x15e>
 8000f8c:	6923      	ldr	r3, [r4, #16]
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d189      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f92:	6808      	ldr	r0, [r1, #0]
 8000f94:	23f8      	movs	r3, #248	; 0xf8
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	fab3 f283 	clz	r2, r3
 8000f9e:	6963      	ldr	r3, [r4, #20]
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]
 8000faa:	e74d      	b.n	8000e48 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fac:	6922      	ldr	r2, [r4, #16]
 8000fae:	2501      	movs	r5, #1
 8000fb0:	b302      	cbz	r2, 8000ff4 <HAL_RCC_OscConfig+0x1c0>
 8000fb2:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000fb6:	fab3 f383 	clz	r3, r3
 8000fba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	2702      	movs	r7, #2
 8000fc6:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000fc8:	f7ff ff2c 	bl	8000e24 <HAL_GetTick>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd2:	680a      	ldr	r2, [r1, #0]
 8000fd4:	fa97 f3a7 	rbit	r3, r7
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	f003 031f 	and.w	r3, r3, #31
 8000fe0:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe4:	4213      	tst	r3, r2
 8000fe6:	d1d4      	bne.n	8000f92 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe8:	f7ff ff1c 	bl	8000e24 <HAL_GetTick>
 8000fec:	1b80      	subs	r0, r0, r6
 8000fee:	2802      	cmp	r0, #2
 8000ff0:	d9ed      	bls.n	8000fce <HAL_RCC_OscConfig+0x19a>
 8000ff2:	e783      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
 8000ff4:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000ff8:	fab3 f383 	clz	r3, r3
 8000ffc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001000:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	2702      	movs	r7, #2
 8001008:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800100a:	f7ff ff0b 	bl	8000e24 <HAL_GetTick>
 800100e:	4606      	mov	r6, r0
 8001010:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001014:	680a      	ldr	r2, [r1, #0]
 8001016:	fa97 f3a7 	rbit	r3, r7
 800101a:	fab3 f383 	clz	r3, r3
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	fa05 f303 	lsl.w	r3, r5, r3
 8001026:	4213      	tst	r3, r2
 8001028:	f43f af0e 	beq.w	8000e48 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fefa 	bl	8000e24 <HAL_GetTick>
 8001030:	1b80      	subs	r0, r0, r6
 8001032:	2802      	cmp	r0, #2
 8001034:	d9ec      	bls.n	8001010 <HAL_RCC_OscConfig+0x1dc>
 8001036:	e761      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001038:	69a2      	ldr	r2, [r4, #24]
 800103a:	4d25      	ldr	r5, [pc, #148]	; (80010d0 <HAL_RCC_OscConfig+0x29c>)
 800103c:	4825      	ldr	r0, [pc, #148]	; (80010d4 <HAL_RCC_OscConfig+0x2a0>)
 800103e:	2101      	movs	r1, #1
 8001040:	b312      	cbz	r2, 8001088 <HAL_RCC_OscConfig+0x254>
 8001042:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	4403      	add	r3, r0
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	2602      	movs	r6, #2
 8001050:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8001052:	f7ff fee7 	bl	8000e24 <HAL_GetTick>
 8001056:	4607      	mov	r7, r0
 8001058:	fa96 f3a6 	rbit	r3, r6
 800105c:	fa96 f3a6 	rbit	r3, r6
 8001060:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001064:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001066:	fa96 f3a6 	rbit	r3, r6
 800106a:	fab3 f383 	clz	r3, r3
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	4213      	tst	r3, r2
 8001078:	f47f aeea 	bne.w	8000e50 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800107c:	f7ff fed2 	bl	8000e24 <HAL_GetTick>
 8001080:	1bc0      	subs	r0, r0, r7
 8001082:	2802      	cmp	r0, #2
 8001084:	d9e8      	bls.n	8001058 <HAL_RCC_OscConfig+0x224>
 8001086:	e739      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
 8001088:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	4403      	add	r3, r0
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	2602      	movs	r6, #2
 8001096:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001098:	f7ff fec4 	bl	8000e24 <HAL_GetTick>
 800109c:	4607      	mov	r7, r0
 800109e:	fa96 f3a6 	rbit	r3, r6
 80010a2:	fa96 f3a6 	rbit	r3, r6
 80010a6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80010ac:	fa96 f3a6 	rbit	r3, r6
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	4213      	tst	r3, r2
 80010be:	f43f aec7 	beq.w	8000e50 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c2:	f7ff feaf 	bl	8000e24 <HAL_GetTick>
 80010c6:	1bc0      	subs	r0, r0, r7
 80010c8:	2802      	cmp	r0, #2
 80010ca:	d9e8      	bls.n	800109e <HAL_RCC_OscConfig+0x26a>
 80010cc:	e716      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d8:	498a      	ldr	r1, [pc, #552]	; (8001304 <HAL_RCC_OscConfig+0x4d0>)
 80010da:	69cb      	ldr	r3, [r1, #28]
 80010dc:	00d8      	lsls	r0, r3, #3
 80010de:	d433      	bmi.n	8001148 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010e0:	69cb      	ldr	r3, [r1, #28]
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e6:	61cb      	str	r3, [r1, #28]
 80010e8:	69cb      	ldr	r3, [r1, #28]
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010f2:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f4:	4e84      	ldr	r6, [pc, #528]	; (8001308 <HAL_RCC_OscConfig+0x4d4>)
 80010f6:	6833      	ldr	r3, [r6, #0]
 80010f8:	05da      	lsls	r2, r3, #23
 80010fa:	d527      	bpl.n	800114c <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fc:	68e3      	ldr	r3, [r4, #12]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d134      	bne.n	800116c <HAL_RCC_OscConfig+0x338>
 8001102:	6a0b      	ldr	r3, [r1, #32]
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800110a:	f7ff fe8b 	bl	8000e24 <HAL_GetTick>
 800110e:	2602      	movs	r6, #2
 8001110:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001112:	f04f 0801 	mov.w	r8, #1
 8001116:	fa96 f3a6 	rbit	r3, r6
 800111a:	fa96 f3a6 	rbit	r3, r6
 800111e:	2b00      	cmp	r3, #0
 8001120:	d061      	beq.n	80011e6 <HAL_RCC_OscConfig+0x3b2>
 8001122:	6a0a      	ldr	r2, [r1, #32]
 8001124:	fa96 f3a6 	rbit	r3, r6
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	f003 031f 	and.w	r3, r3, #31
 8001130:	fa08 f303 	lsl.w	r3, r8, r3
 8001134:	4213      	tst	r3, r2
 8001136:	d04e      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8001138:	2d00      	cmp	r5, #0
 800113a:	f43f ae8d 	beq.w	8000e58 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800113e:	69cb      	ldr	r3, [r1, #28]
 8001140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001144:	61cb      	str	r3, [r1, #28]
 8001146:	e687      	b.n	8000e58 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001148:	2500      	movs	r5, #0
 800114a:	e7d3      	b.n	80010f4 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114c:	6833      	ldr	r3, [r6, #0]
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001154:	f7ff fe66 	bl	8000e24 <HAL_GetTick>
 8001158:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115a:	6833      	ldr	r3, [r6, #0]
 800115c:	05db      	lsls	r3, r3, #23
 800115e:	d4cd      	bmi.n	80010fc <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001160:	f7ff fe60 	bl	8000e24 <HAL_GetTick>
 8001164:	1bc0      	subs	r0, r0, r7
 8001166:	2864      	cmp	r0, #100	; 0x64
 8001168:	d9f7      	bls.n	800115a <HAL_RCC_OscConfig+0x326>
 800116a:	e6c7      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116c:	bb2b      	cbnz	r3, 80011ba <HAL_RCC_OscConfig+0x386>
 800116e:	6a0b      	ldr	r3, [r1, #32]
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	620b      	str	r3, [r1, #32]
 8001176:	6a0b      	ldr	r3, [r1, #32]
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800117e:	f7ff fe51 	bl	8000e24 <HAL_GetTick>
 8001182:	2602      	movs	r6, #2
 8001184:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001186:	f04f 0801 	mov.w	r8, #1
 800118a:	fa96 f3a6 	rbit	r3, r6
 800118e:	fa96 f3a6 	rbit	r3, r6
 8001192:	b363      	cbz	r3, 80011ee <HAL_RCC_OscConfig+0x3ba>
 8001194:	6a0a      	ldr	r2, [r1, #32]
 8001196:	fa96 f3a6 	rbit	r3, r6
 800119a:	fab3 f383 	clz	r3, r3
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	fa08 f303 	lsl.w	r3, r8, r3
 80011a6:	4213      	tst	r3, r2
 80011a8:	d0c6      	beq.n	8001138 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011aa:	f7ff fe3b 	bl	8000e24 <HAL_GetTick>
 80011ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80011b2:	1bc0      	subs	r0, r0, r7
 80011b4:	4298      	cmp	r0, r3
 80011b6:	d9e8      	bls.n	800118a <HAL_RCC_OscConfig+0x356>
 80011b8:	e6a0      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	6a0b      	ldr	r3, [r1, #32]
 80011be:	d103      	bne.n	80011c8 <HAL_RCC_OscConfig+0x394>
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	620b      	str	r3, [r1, #32]
 80011c6:	e79c      	b.n	8001102 <HAL_RCC_OscConfig+0x2ce>
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	620b      	str	r3, [r1, #32]
 80011ce:	6a0b      	ldr	r3, [r1, #32]
 80011d0:	f023 0304 	bic.w	r3, r3, #4
 80011d4:	e798      	b.n	8001108 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f7ff fe25 	bl	8000e24 <HAL_GetTick>
 80011da:	f241 3388 	movw	r3, #5000	; 0x1388
 80011de:	1bc0      	subs	r0, r0, r7
 80011e0:	4298      	cmp	r0, r3
 80011e2:	d998      	bls.n	8001116 <HAL_RCC_OscConfig+0x2e2>
 80011e4:	e68a      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
 80011e6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ea:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80011ec:	e79a      	b.n	8001124 <HAL_RCC_OscConfig+0x2f0>
 80011ee:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80011f4:	e7cf      	b.n	8001196 <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f6:	4943      	ldr	r1, [pc, #268]	; (8001304 <HAL_RCC_OscConfig+0x4d0>)
 80011f8:	684b      	ldr	r3, [r1, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b08      	cmp	r3, #8
 8001200:	f43f ae51 	beq.w	8000ea6 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001204:	2a02      	cmp	r2, #2
 8001206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800120a:	d154      	bne.n	80012b6 <HAL_RCC_OscConfig+0x482>
 800120c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001218:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001222:	f7ff fdff 	bl	8000e24 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001226:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800130c <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 800122a:	4606      	mov	r6, r0
 800122c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001230:	2501      	movs	r5, #1
 8001232:	fa97 f3a7 	rbit	r3, r7
 8001236:	680a      	ldr	r2, [r1, #0]
 8001238:	fa97 f3a7 	rbit	r3, r7
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	f003 031f 	and.w	r3, r3, #31
 8001244:	fa05 f303 	lsl.w	r3, r5, r3
 8001248:	4213      	tst	r3, r2
 800124a:	d12e      	bne.n	80012aa <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124c:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8001250:	684a      	ldr	r2, [r1, #4]
 8001252:	4303      	orrs	r3, r0
 8001254:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
 800125c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001260:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800126c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001270:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001272:	4f26      	ldr	r7, [pc, #152]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8001274:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001276:	f7ff fdd5 	bl	8000e24 <HAL_GetTick>
 800127a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800127e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001280:	2601      	movs	r6, #1
 8001282:	fa95 f3a5 	rbit	r3, r5
 8001286:	680a      	ldr	r2, [r1, #0]
 8001288:	fa95 f3a5 	rbit	r3, r5
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	fa06 f303 	lsl.w	r3, r6, r3
 8001298:	4213      	tst	r3, r2
 800129a:	f47f ade1 	bne.w	8000e60 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fdc1 	bl	8000e24 <HAL_GetTick>
 80012a2:	1b00      	subs	r0, r0, r4
 80012a4:	42b8      	cmp	r0, r7
 80012a6:	d9ec      	bls.n	8001282 <HAL_RCC_OscConfig+0x44e>
 80012a8:	e628      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012aa:	f7ff fdbb 	bl	8000e24 <HAL_GetTick>
 80012ae:	1b80      	subs	r0, r0, r6
 80012b0:	4540      	cmp	r0, r8
 80012b2:	d9be      	bls.n	8001232 <HAL_RCC_OscConfig+0x3fe>
 80012b4:	e622      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
 80012b6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012cc:	f7ff fdaa 	bl	8000e24 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d0:	4f0e      	ldr	r7, [pc, #56]	; (800130c <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 80012d2:	4604      	mov	r4, r0
 80012d4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d8:	2601      	movs	r6, #1
 80012da:	fa95 f3a5 	rbit	r3, r5
 80012de:	680a      	ldr	r2, [r1, #0]
 80012e0:	fa95 f3a5 	rbit	r3, r5
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	fa06 f303 	lsl.w	r3, r6, r3
 80012f0:	4213      	tst	r3, r2
 80012f2:	f43f adb5 	beq.w	8000e60 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fd95 	bl	8000e24 <HAL_GetTick>
 80012fa:	1b00      	subs	r0, r0, r4
 80012fc:	42b8      	cmp	r0, r7
 80012fe:	d9ec      	bls.n	80012da <HAL_RCC_OscConfig+0x4a6>
 8001300:	e5fc      	b.n	8000efc <HAL_RCC_OscConfig+0xc8>
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40007000 	.word	0x40007000
 800130c:	00030d40 	.word	0x00030d40

08001310 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_RCC_ClockConfig+0x144>)
{
 8001312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001314:	6813      	ldr	r3, [r2, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	428b      	cmp	r3, r1
{
 800131c:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800131e:	d31b      	bcc.n	8001358 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001320:	6822      	ldr	r2, [r4, #0]
 8001322:	0790      	lsls	r0, r2, #30
 8001324:	d424      	bmi.n	8001370 <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001326:	07d2      	lsls	r2, r2, #31
 8001328:	d42a      	bmi.n	8001380 <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800132a:	4a4a      	ldr	r2, [pc, #296]	; (8001454 <HAL_RCC_ClockConfig+0x144>)
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	428b      	cmp	r3, r1
 8001334:	d87a      	bhi.n	800142c <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001336:	6820      	ldr	r0, [r4, #0]
 8001338:	0743      	lsls	r3, r0, #29
 800133a:	f100 8082 	bmi.w	8001442 <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133e:	f010 0008 	ands.w	r0, r0, #8
 8001342:	d014      	beq.n	800136e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001344:	4a44      	ldr	r2, [pc, #272]	; (8001458 <HAL_RCC_ClockConfig+0x148>)
 8001346:	6921      	ldr	r1, [r4, #16]
 8001348:	6853      	ldr	r3, [r2, #4]
 800134a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800134e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001352:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001354:	2000      	movs	r0, #0
 8001356:	e00a      	b.n	800136e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001358:	6813      	ldr	r3, [r2, #0]
 800135a:	f023 0307 	bic.w	r3, r3, #7
 800135e:	430b      	orrs	r3, r1
 8001360:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001362:	6813      	ldr	r3, [r2, #0]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	428b      	cmp	r3, r1
 800136a:	d0d9      	beq.n	8001320 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 800136c:	2001      	movs	r0, #1
}
 800136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001370:	4839      	ldr	r0, [pc, #228]	; (8001458 <HAL_RCC_ClockConfig+0x148>)
 8001372:	68a5      	ldr	r5, [r4, #8]
 8001374:	6843      	ldr	r3, [r0, #4]
 8001376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800137a:	432b      	orrs	r3, r5
 800137c:	6043      	str	r3, [r0, #4]
 800137e:	e7d2      	b.n	8001326 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001380:	6862      	ldr	r2, [r4, #4]
 8001382:	4d35      	ldr	r5, [pc, #212]	; (8001458 <HAL_RCC_ClockConfig+0x148>)
 8001384:	2a01      	cmp	r2, #1
 8001386:	d127      	bne.n	80013d8 <HAL_RCC_ClockConfig+0xc8>
 8001388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001390:	6828      	ldr	r0, [r5, #0]
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	d0e2      	beq.n	800136c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a6:	686b      	ldr	r3, [r5, #4]
 80013a8:	f023 0303 	bic.w	r3, r3, #3
 80013ac:	431a      	orrs	r2, r3
 80013ae:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 80013b0:	f7ff fd38 	bl	8000e24 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b4:	6863      	ldr	r3, [r4, #4]
 80013b6:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80013b8:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ba:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013be:	d11e      	bne.n	80013fe <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c0:	686b      	ldr	r3, [r5, #4]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d0af      	beq.n	800132a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ca:	f7ff fd2b 	bl	8000e24 <HAL_GetTick>
 80013ce:	1b80      	subs	r0, r0, r6
 80013d0:	42b8      	cmp	r0, r7
 80013d2:	d9f5      	bls.n	80013c0 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 80013d4:	2003      	movs	r0, #3
 80013d6:	e7ca      	b.n	800136e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d8:	2a02      	cmp	r2, #2
 80013da:	bf0c      	ite	eq
 80013dc:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80013e0:	2302      	movne	r3, #2
 80013e2:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	682e      	ldr	r6, [r5, #0]
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	fab3 f383 	clz	r3, r3
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f303 	lsl.w	r3, r0, r3
 80013fa:	4233      	tst	r3, r6
 80013fc:	e7d2      	b.n	80013a4 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001402:	686b      	ldr	r3, [r5, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d08e      	beq.n	800132a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140c:	f7ff fd0a 	bl	8000e24 <HAL_GetTick>
 8001410:	1b80      	subs	r0, r0, r6
 8001412:	42b8      	cmp	r0, r7
 8001414:	d9f5      	bls.n	8001402 <HAL_RCC_ClockConfig+0xf2>
 8001416:	e7dd      	b.n	80013d4 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fd04 	bl	8000e24 <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	42b8      	cmp	r0, r7
 8001420:	d8d8      	bhi.n	80013d4 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001422:	686b      	ldr	r3, [r5, #4]
 8001424:	f013 0f0c 	tst.w	r3, #12
 8001428:	d1f6      	bne.n	8001418 <HAL_RCC_ClockConfig+0x108>
 800142a:	e77e      	b.n	800132a <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142c:	6813      	ldr	r3, [r2, #0]
 800142e:	f023 0307 	bic.w	r3, r3, #7
 8001432:	430b      	orrs	r3, r1
 8001434:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001436:	6813      	ldr	r3, [r2, #0]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	428b      	cmp	r3, r1
 800143e:	d195      	bne.n	800136c <HAL_RCC_ClockConfig+0x5c>
 8001440:	e779      	b.n	8001336 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001442:	4905      	ldr	r1, [pc, #20]	; (8001458 <HAL_RCC_ClockConfig+0x148>)
 8001444:	68e3      	ldr	r3, [r4, #12]
 8001446:	684a      	ldr	r2, [r1, #4]
 8001448:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800144c:	431a      	orrs	r2, r3
 800144e:	604a      	str	r2, [r1, #4]
 8001450:	e775      	b.n	800133e <HAL_RCC_ClockConfig+0x2e>
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001460:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80015d8 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001464:	4c5d      	ldr	r4, [pc, #372]	; (80015dc <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8001466:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001468:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800146c:	680a      	ldr	r2, [r1, #0]
 800146e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001472:	d102      	bne.n	800147a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8001474:	b003      	add	sp, #12
 8001476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800147a:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 800147e:	ea1a 0202 	ands.w	r2, sl, r2
 8001482:	f000 809e 	beq.w	80015c2 <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001486:	684d      	ldr	r5, [r1, #4]
 8001488:	f025 0e10 	bic.w	lr, r5, #16
 800148c:	f1be 0f02 	cmp.w	lr, #2
 8001490:	d114      	bne.n	80014bc <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8001492:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001496:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800149e:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80014a6:	270f      	movs	r7, #15
 80014a8:	fa07 f70b 	lsl.w	r7, r7, fp
 80014ac:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	690e      	ldr	r6, [r1, #16]
 80014b2:	fa06 f60b 	lsl.w	r6, r6, fp
 80014b6:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 80014b8:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 80014bc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80014c4:	2603      	movs	r6, #3
 80014c6:	fa06 f70c 	lsl.w	r7, r6, ip
 80014ca:	ea2b 0b07 	bic.w	fp, fp, r7
 80014ce:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d0:	f005 0703 	and.w	r7, r5, #3
 80014d4:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014dc:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e0:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80014e4:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e6:	d811      	bhi.n	800150c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 80014e8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ea:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ee:	68cf      	ldr	r7, [r1, #12]
 80014f0:	fa07 f70c 	lsl.w	r7, r7, ip
 80014f4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80014f8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80014fa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014fc:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001500:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001504:	409f      	lsls	r7, r3
 8001506:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 800150a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800150c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001510:	688e      	ldr	r6, [r1, #8]
 8001512:	fa06 f60c 	lsl.w	r6, r6, ip
 8001516:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8001518:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151a:	00ee      	lsls	r6, r5, #3
 800151c:	d551      	bpl.n	80015c2 <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8001522:	f046 0601 	orr.w	r6, r6, #1
 8001526:	f8c8 6018 	str.w	r6, [r8, #24]
 800152a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800152e:	f023 0703 	bic.w	r7, r3, #3
 8001532:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001536:	f006 0601 	and.w	r6, r6, #1
 800153a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800153e:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001540:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001544:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001546:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001548:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800154c:	f04f 0c0f 	mov.w	ip, #15
 8001550:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001554:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001558:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800155c:	d033      	beq.n	80015c6 <HAL_GPIO_Init+0x16a>
 800155e:	4e20      	ldr	r6, [pc, #128]	; (80015e0 <HAL_GPIO_Init+0x184>)
 8001560:	42b0      	cmp	r0, r6
 8001562:	d032      	beq.n	80015ca <HAL_GPIO_Init+0x16e>
 8001564:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001568:	42b0      	cmp	r0, r6
 800156a:	d030      	beq.n	80015ce <HAL_GPIO_Init+0x172>
 800156c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001570:	42b0      	cmp	r0, r6
 8001572:	d02e      	beq.n	80015d2 <HAL_GPIO_Init+0x176>
 8001574:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001578:	42b0      	cmp	r0, r6
 800157a:	bf0c      	ite	eq
 800157c:	2604      	moveq	r6, #4
 800157e:	2605      	movne	r6, #5
 8001580:	fa06 f60e 	lsl.w	r6, r6, lr
 8001584:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001588:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800158a:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800158c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800158e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001592:	bf0c      	ite	eq
 8001594:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001596:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8001598:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800159a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80015a0:	bf0c      	ite	eq
 80015a2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80015a4:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 80015a6:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80015a8:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015aa:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80015ae:	bf0c      	ite	eq
 80015b0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80015b2:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 80015b4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80015b6:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b8:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80015ba:	bf54      	ite	pl
 80015bc:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80015be:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 80015c0:	60e6      	str	r6, [r4, #12]
    position++;
 80015c2:	3301      	adds	r3, #1
 80015c4:	e752      	b.n	800146c <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015c6:	2600      	movs	r6, #0
 80015c8:	e7da      	b.n	8001580 <HAL_GPIO_Init+0x124>
 80015ca:	2601      	movs	r6, #1
 80015cc:	e7d8      	b.n	8001580 <HAL_GPIO_Init+0x124>
 80015ce:	2602      	movs	r6, #2
 80015d0:	e7d6      	b.n	8001580 <HAL_GPIO_Init+0x124>
 80015d2:	2603      	movs	r6, #3
 80015d4:	e7d4      	b.n	8001580 <HAL_GPIO_Init+0x124>
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010400 	.word	0x40010400
 80015e0:	48000400 	.word	0x48000400

080015e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	b10a      	cbz	r2, 80015ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015e6:	6181      	str	r1, [r0, #24]
 80015e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ea:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80015ec:	4770      	bx	lr
 80015ee:	0000      	movs	r0, r0

080015f0 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80015f0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015f2:	6881      	ldr	r1, [r0, #8]
 80015f4:	69c3      	ldr	r3, [r0, #28]
{
 80015f6:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015f8:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80015fa:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015fc:	4329      	orrs	r1, r5
 80015fe:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001600:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001604:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001606:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800160a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800160c:	4321      	orrs	r1, r4
 800160e:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001610:	6851      	ldr	r1, [r2, #4]
 8001612:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001614:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001616:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800161a:	4321      	orrs	r1, r4
 800161c:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800161e:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001620:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001622:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001626:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001628:	4321      	orrs	r1, r4
 800162a:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800162c:	4962      	ldr	r1, [pc, #392]	; (80017b8 <UART_SetConfig+0x1c8>)
 800162e:	428a      	cmp	r2, r1
 8001630:	d116      	bne.n	8001660 <UART_SetConfig+0x70>
 8001632:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 8001636:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001638:	f001 0103 	and.w	r1, r1, #3
 800163c:	3901      	subs	r1, #1
 800163e:	2902      	cmp	r1, #2
 8001640:	f200 80b2 	bhi.w	80017a8 <UART_SetConfig+0x1b8>
 8001644:	4c5d      	ldr	r4, [pc, #372]	; (80017bc <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800164a:	5c61      	ldrb	r1, [r4, r1]
 800164c:	d177      	bne.n	800173e <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 800164e:	2908      	cmp	r1, #8
 8001650:	d872      	bhi.n	8001738 <UART_SetConfig+0x148>
 8001652:	e8df f001 	tbb	[pc, r1]
 8001656:	acac      	.short	0xacac
 8001658:	71ac7124 	.word	0x71ac7124
 800165c:	7171      	.short	0x7171
 800165e:	a4          	.byte	0xa4
 800165f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001660:	4957      	ldr	r1, [pc, #348]	; (80017c0 <UART_SetConfig+0x1d0>)
 8001662:	428a      	cmp	r2, r1
 8001664:	d12c      	bne.n	80016c0 <UART_SetConfig+0xd0>
 8001666:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 800166a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800166c:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8001670:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001674:	f000 8090 	beq.w	8001798 <UART_SetConfig+0x1a8>
 8001678:	d80b      	bhi.n	8001692 <UART_SetConfig+0xa2>
 800167a:	2900      	cmp	r1, #0
 800167c:	f000 8094 	beq.w	80017a8 <UART_SetConfig+0x1b8>
 8001680:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001684:	f000 8090 	beq.w	80017a8 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800168c:	d054      	beq.n	8001738 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800168e:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001690:	e015      	b.n	80016be <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001692:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8001696:	d1f7      	bne.n	8001688 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800169c:	d166      	bne.n	800176c <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800169e:	6841      	ldr	r1, [r0, #4]
 80016a0:	084b      	lsrs	r3, r1, #1
 80016a2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80016a6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016aa:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 80016ae:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016b0:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 80016b2:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016b6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80016ba:	430b      	orrs	r3, r1
 80016bc:	60d3      	str	r3, [r2, #12]

}
 80016be:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016c0:	4940      	ldr	r1, [pc, #256]	; (80017c4 <UART_SetConfig+0x1d4>)
 80016c2:	428a      	cmp	r2, r1
 80016c4:	d110      	bne.n	80016e8 <UART_SetConfig+0xf8>
 80016c6:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 80016ca:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80016cc:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 80016d0:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80016d4:	d060      	beq.n	8001798 <UART_SetConfig+0x1a8>
 80016d6:	d804      	bhi.n	80016e2 <UART_SetConfig+0xf2>
 80016d8:	2900      	cmp	r1, #0
 80016da:	d065      	beq.n	80017a8 <UART_SetConfig+0x1b8>
 80016dc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80016e0:	e7d0      	b.n	8001684 <UART_SetConfig+0x94>
 80016e2:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80016e6:	e7d6      	b.n	8001696 <UART_SetConfig+0xa6>
 80016e8:	4937      	ldr	r1, [pc, #220]	; (80017c8 <UART_SetConfig+0x1d8>)
 80016ea:	428a      	cmp	r2, r1
 80016ec:	d110      	bne.n	8001710 <UART_SetConfig+0x120>
 80016ee:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 80016f2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80016f4:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 80016f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80016fc:	d04c      	beq.n	8001798 <UART_SetConfig+0x1a8>
 80016fe:	d804      	bhi.n	800170a <UART_SetConfig+0x11a>
 8001700:	2900      	cmp	r1, #0
 8001702:	d051      	beq.n	80017a8 <UART_SetConfig+0x1b8>
 8001704:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001708:	e7bc      	b.n	8001684 <UART_SetConfig+0x94>
 800170a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800170e:	e7c2      	b.n	8001696 <UART_SetConfig+0xa6>
 8001710:	492e      	ldr	r1, [pc, #184]	; (80017cc <UART_SetConfig+0x1dc>)
 8001712:	428a      	cmp	r2, r1
 8001714:	d1b8      	bne.n	8001688 <UART_SetConfig+0x98>
 8001716:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 800171a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800171c:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 8001720:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001724:	d038      	beq.n	8001798 <UART_SetConfig+0x1a8>
 8001726:	d804      	bhi.n	8001732 <UART_SetConfig+0x142>
 8001728:	2900      	cmp	r1, #0
 800172a:	d03d      	beq.n	80017a8 <UART_SetConfig+0x1b8>
 800172c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001730:	e7a8      	b.n	8001684 <UART_SetConfig+0x94>
 8001732:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001736:	e7ae      	b.n	8001696 <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 8001738:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800173a:	2300      	movs	r3, #0
 800173c:	e7b9      	b.n	80016b2 <UART_SetConfig+0xc2>
    switch (clocksource)
 800173e:	2908      	cmp	r1, #8
 8001740:	d8a5      	bhi.n	800168e <UART_SetConfig+0x9e>
 8001742:	a301      	add	r3, pc, #4	; (adr r3, 8001748 <UART_SetConfig+0x158>)
 8001744:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001748:	08001785 	.word	0x08001785
 800174c:	08001785 	.word	0x08001785
 8001750:	0800176d 	.word	0x0800176d
 8001754:	0800168f 	.word	0x0800168f
 8001758:	08001785 	.word	0x08001785
 800175c:	0800168f 	.word	0x0800168f
 8001760:	0800168f 	.word	0x0800168f
 8001764:	0800168f 	.word	0x0800168f
 8001768:	0800178f 	.word	0x0800178f
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800176c:	6841      	ldr	r1, [r0, #4]
 800176e:	084b      	lsrs	r3, r1, #1
 8001770:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001774:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001778:	fbb3 f3f1 	udiv	r3, r3, r1
 800177c:	b29b      	uxth	r3, r3
 800177e:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001780:	2000      	movs	r0, #0
        break;
 8001782:	e79c      	b.n	80016be <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001784:	6841      	ldr	r1, [r0, #4]
 8001786:	084b      	lsrs	r3, r1, #1
 8001788:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 800178c:	e7f4      	b.n	8001778 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800178e:	6841      	ldr	r1, [r0, #4]
 8001790:	084b      	lsrs	r3, r1, #1
 8001792:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001796:	e7ef      	b.n	8001778 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800179c:	d1f7      	bne.n	800178e <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800179e:	6841      	ldr	r1, [r0, #4]
 80017a0:	084b      	lsrs	r3, r1, #1
 80017a2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80017a6:	e780      	b.n	80016aa <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ac:	d1ea      	bne.n	8001784 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017ae:	6841      	ldr	r1, [r0, #4]
 80017b0:	084b      	lsrs	r3, r1, #1
 80017b2:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 80017b6:	e778      	b.n	80016aa <UART_SetConfig+0xba>
 80017b8:	40013800 	.word	0x40013800
 80017bc:	080025cc 	.word	0x080025cc
 80017c0:	40004400 	.word	0x40004400
 80017c4:	40004800 	.word	0x40004800
 80017c8:	40004c00 	.word	0x40004c00
 80017cc:	40005000 	.word	0x40005000

080017d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	9f06      	ldr	r7, [sp, #24]
 80017d4:	4604      	mov	r4, r0
 80017d6:	4615      	mov	r5, r2
 80017d8:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	69d3      	ldr	r3, [r2, #28]
 80017de:	ea31 0303 	bics.w	r3, r1, r3
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	42ab      	cmp	r3, r5
 80017ea:	d001      	beq.n	80017f0 <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80017ec:	2000      	movs	r0, #0
 80017ee:	e014      	b.n	800181a <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 80017f0:	1c7b      	adds	r3, r7, #1
 80017f2:	d0f3      	beq.n	80017dc <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017f4:	b997      	cbnz	r7, 800181c <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001808:	2320      	movs	r3, #32
 800180a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800180e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001812:	2300      	movs	r3, #0
 8001814:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001818:	2003      	movs	r0, #3
}
 800181a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800181c:	f7ff fb02 	bl	8000e24 <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	42b8      	cmp	r0, r7
 8001824:	d9d9      	bls.n	80017da <UART_WaitOnFlagUntilTimeout+0xa>
 8001826:	e7e6      	b.n	80017f6 <UART_WaitOnFlagUntilTimeout+0x26>

08001828 <UART_CheckIdleState>:
{
 8001828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800182a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182c:	2100      	movs	r1, #0
 800182e:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001830:	f7ff faf8 	bl	8000e24 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800183a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800183c:	d417      	bmi.n	800186e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	075b      	lsls	r3, r3, #29
 8001844:	d50a      	bpl.n	800185c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001846:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	462b      	mov	r3, r5
 8001850:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff ffbb 	bl	80017d0 <UART_WaitOnFlagUntilTimeout>
 800185a:	b9a0      	cbnz	r0, 8001886 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800185c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800185e:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001860:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001864:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001868:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800186c:	e00c      	b.n	8001888 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800186e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	460a      	mov	r2, r1
 8001876:	4603      	mov	r3, r0
 8001878:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff ffa7 	bl	80017d0 <UART_WaitOnFlagUntilTimeout>
 8001882:	2800      	cmp	r0, #0
 8001884:	d0db      	beq.n	800183e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001886:	2003      	movs	r0, #3
}
 8001888:	b003      	add	sp, #12
 800188a:	bd30      	pop	{r4, r5, pc}

0800188c <HAL_UART_Init>:
{
 800188c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800188e:	4604      	mov	r4, r0
 8001890:	b328      	cbz	r0, 80018de <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001892:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001896:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800189a:	b90b      	cbnz	r3, 80018a0 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800189c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 80018a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80018a2:	2324      	movs	r3, #36	; 0x24
 80018a4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff fe9d 	bl	80015f0 <UART_SetConfig>
 80018b6:	2801      	cmp	r0, #1
 80018b8:	d011      	beq.n	80018de <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018ca:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 80018d2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 80018da:	f7ff bfa5 	b.w	8001828 <UART_CheckIdleState>
}
 80018de:	2001      	movs	r0, #1
 80018e0:	bd10      	pop	{r4, pc}

080018e2 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018e4:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80018e6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80018ea:	2b20      	cmp	r3, #32
{
 80018ec:	460d      	mov	r5, r1
 80018ee:	4604      	mov	r4, r0
 80018f0:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80018f2:	d14a      	bne.n	800198a <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 80018f4:	2d00      	cmp	r5, #0
 80018f6:	d046      	beq.n	8001986 <HAL_UART_Transmit+0xa4>
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d044      	beq.n	8001986 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018fc:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001900:	2b01      	cmp	r3, #1
 8001902:	d042      	beq.n	800198a <HAL_UART_Transmit+0xa8>
 8001904:	2301      	movs	r3, #1
 8001906:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800190a:	2300      	movs	r3, #0
 800190c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800190e:	2321      	movs	r3, #33	; 0x21
 8001910:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001914:	f7ff fa86 	bl	8000e24 <HAL_GetTick>

    huart->TxXferSize = Size;
 8001918:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800191c:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 800191e:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001922:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001926:	b292      	uxth	r2, r2
 8001928:	b962      	cbnz	r2, 8001944 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800192a:	9600      	str	r6, [sp, #0]
 800192c:	463b      	mov	r3, r7
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff ff4d 	bl	80017d0 <UART_WaitOnFlagUntilTimeout>
 8001936:	b998      	cbnz	r0, 8001960 <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001938:	2320      	movs	r3, #32
 800193a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800193e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8001942:	e00e      	b.n	8001962 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8001944:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001948:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 800194a:	3a01      	subs	r2, #1
 800194c:	b292      	uxth	r2, r2
 800194e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001952:	463b      	mov	r3, r7
 8001954:	2200      	movs	r2, #0
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ff39 	bl	80017d0 <UART_WaitOnFlagUntilTimeout>
 800195e:	b110      	cbz	r0, 8001966 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001960:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001962:	b003      	add	sp, #12
 8001964:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001966:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001968:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800196a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800196e:	d107      	bne.n	8001980 <HAL_UART_Transmit+0x9e>
 8001970:	6923      	ldr	r3, [r4, #16]
 8001972:	b92b      	cbnz	r3, 8001980 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001974:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001978:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800197c:	8513      	strh	r3, [r2, #40]	; 0x28
 800197e:	e7d0      	b.n	8001922 <HAL_UART_Transmit+0x40>
 8001980:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001984:	e7fa      	b.n	800197c <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8001986:	2001      	movs	r0, #1
 8001988:	e7eb      	b.n	8001962 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800198a:	2002      	movs	r0, #2
 800198c:	e7e9      	b.n	8001962 <HAL_UART_Transmit+0x80>

0800198e <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800198e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001992:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001994:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001998:	2b20      	cmp	r3, #32
{
 800199a:	460d      	mov	r5, r1
 800199c:	4604      	mov	r4, r0
 800199e:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80019a0:	d15c      	bne.n	8001a5c <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 80019a2:	2d00      	cmp	r5, #0
 80019a4:	d058      	beq.n	8001a58 <HAL_UART_Receive+0xca>
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	d056      	beq.n	8001a58 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019aa:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d054      	beq.n	8001a5c <HAL_UART_Receive+0xce>
 80019b2:	2301      	movs	r3, #1
 80019b4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80019b8:	6803      	ldr	r3, [r0, #0]
 80019ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019be:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019c4:	2322      	movs	r3, #34	; 0x22
 80019c6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80019ca:	f7ff fa2b 	bl	8000e24 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80019ce:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80019d0:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80019d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80019d8:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 80019da:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80019de:	d115      	bne.n	8001a0c <HAL_UART_Receive+0x7e>
 80019e0:	6923      	ldr	r3, [r4, #16]
 80019e2:	b98b      	cbnz	r3, 8001a08 <HAL_UART_Receive+0x7a>
 80019e4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80019e8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80019ec:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80019f0:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80019f4:	b280      	uxth	r0, r0
 80019f6:	b980      	cbnz	r0, 8001a1a <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80019f8:	2320      	movs	r3, #32
 80019fa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019fe:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001a02:	b002      	add	sp, #8
 8001a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8001a08:	23ff      	movs	r3, #255	; 0xff
 8001a0a:	e7ed      	b.n	80019e8 <HAL_UART_Receive+0x5a>
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ed      	bne.n	80019ec <HAL_UART_Receive+0x5e>
 8001a10:	6923      	ldr	r3, [r4, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f8      	beq.n	8001a08 <HAL_UART_Receive+0x7a>
 8001a16:	237f      	movs	r3, #127	; 0x7f
 8001a18:	e7e6      	b.n	80019e8 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8001a1a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a1e:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 8001a20:	3a01      	subs	r2, #1
 8001a22:	b292      	uxth	r2, r2
 8001a24:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a28:	4643      	mov	r3, r8
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f7ff fece 	bl	80017d0 <UART_WaitOnFlagUntilTimeout>
 8001a34:	b9a0      	cbnz	r0, 8001a60 <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a36:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a38:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a3a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001a3e:	d106      	bne.n	8001a4e <HAL_UART_Receive+0xc0>
 8001a40:	6922      	ldr	r2, [r4, #16]
 8001a42:	b922      	cbnz	r2, 8001a4e <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a46:	403b      	ands	r3, r7
 8001a48:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8001a4c:	e7d0      	b.n	80019f0 <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001a4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a50:	403b      	ands	r3, r7
 8001a52:	f805 3b01 	strb.w	r3, [r5], #1
 8001a56:	e7cb      	b.n	80019f0 <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8001a58:	2001      	movs	r0, #1
 8001a5a:	e7d2      	b.n	8001a02 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	e7d0      	b.n	8001a02 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8001a60:	2003      	movs	r0, #3
 8001a62:	e7ce      	b.n	8001a02 <HAL_UART_Receive+0x74>

08001a64 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a64:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <_sbrk+0x2c>)
 8001a66:	6811      	ldr	r1, [r2, #0]
{
 8001a68:	b508      	push	{r3, lr}
 8001a6a:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001a6c:	b909      	cbnz	r1, 8001a72 <_sbrk+0xe>
		heap_end = &end;
 8001a6e:	4909      	ldr	r1, [pc, #36]	; (8001a94 <_sbrk+0x30>)
 8001a70:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001a72:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001a74:	4669      	mov	r1, sp
 8001a76:	4403      	add	r3, r0
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	d906      	bls.n	8001a8a <_sbrk+0x26>
	{
		errno = ENOMEM;
 8001a7c:	f000 f832 	bl	8001ae4 <__errno>
 8001a80:	230c      	movs	r3, #12
 8001a82:	6003      	str	r3, [r0, #0]
		return (char *) -1;
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (char *) prev_heap_end;
}
 8001a88:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001a8a:	6013      	str	r3, [r2, #0]
	return (char *) prev_heap_end;
 8001a8c:	e7fc      	b.n	8001a88 <_sbrk+0x24>
 8001a8e:	bf00      	nop
 8001a90:	2000141c 	.word	0x2000141c
 8001a94:	20001430 	.word	0x20001430

08001a98 <Reset_Handler>:
 8001a98:	2100      	movs	r1, #0
 8001a9a:	e003      	b.n	8001aa4 <LoopCopyDataInit>

08001a9c <CopyDataInit>:
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <LoopForever+0x2>)
 8001a9e:	585b      	ldr	r3, [r3, r1]
 8001aa0:	5043      	str	r3, [r0, r1]
 8001aa2:	3104      	adds	r1, #4

08001aa4 <LoopCopyDataInit>:
 8001aa4:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <LoopForever+0x6>)
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <LoopForever+0xa>)
 8001aa8:	1842      	adds	r2, r0, r1
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d3f6      	bcc.n	8001a9c <CopyDataInit>
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <LoopForever+0xe>)
 8001ab0:	e002      	b.n	8001ab8 <LoopFillZerobss>

08001ab2 <FillZerobss>:
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	3204      	adds	r2, #4

08001ab8 <LoopFillZerobss>:
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <LoopForever+0x12>)
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d3f9      	bcc.n	8001ab2 <FillZerobss>
 8001abe:	f3af 8000 	nop.w
 8001ac2:	f000 f815 	bl	8001af0 <__libc_init_array>
 8001ac6:	f7fe ff79 	bl	80009bc <main>

08001aca <LoopForever>:
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
 8001acc:	08002654 	.word	0x08002654
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000078 	.word	0x20000078
 8001ad8:	20000078 	.word	0x20000078
 8001adc:	20001430 	.word	0x20001430

08001ae0 <BusFault_Handler>:
 8001ae0:	e7fe      	b.n	8001ae0 <BusFault_Handler>
 8001ae2:	0000      	movs	r0, r0

08001ae4 <__errno>:
 8001ae4:	4b01      	ldr	r3, [pc, #4]	; (8001aec <__errno+0x8>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000014 	.word	0x20000014

08001af0 <__libc_init_array>:
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	4d0d      	ldr	r5, [pc, #52]	; (8001b28 <__libc_init_array+0x38>)
 8001af4:	4c0d      	ldr	r4, [pc, #52]	; (8001b2c <__libc_init_array+0x3c>)
 8001af6:	1b64      	subs	r4, r4, r5
 8001af8:	10a4      	asrs	r4, r4, #2
 8001afa:	2600      	movs	r6, #0
 8001afc:	42a6      	cmp	r6, r4
 8001afe:	d109      	bne.n	8001b14 <__libc_init_array+0x24>
 8001b00:	4d0b      	ldr	r5, [pc, #44]	; (8001b30 <__libc_init_array+0x40>)
 8001b02:	4c0c      	ldr	r4, [pc, #48]	; (8001b34 <__libc_init_array+0x44>)
 8001b04:	f000 fd56 	bl	80025b4 <_init>
 8001b08:	1b64      	subs	r4, r4, r5
 8001b0a:	10a4      	asrs	r4, r4, #2
 8001b0c:	2600      	movs	r6, #0
 8001b0e:	42a6      	cmp	r6, r4
 8001b10:	d105      	bne.n	8001b1e <__libc_init_array+0x2e>
 8001b12:	bd70      	pop	{r4, r5, r6, pc}
 8001b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b18:	4798      	blx	r3
 8001b1a:	3601      	adds	r6, #1
 8001b1c:	e7ee      	b.n	8001afc <__libc_init_array+0xc>
 8001b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b22:	4798      	blx	r3
 8001b24:	3601      	adds	r6, #1
 8001b26:	e7f2      	b.n	8001b0e <__libc_init_array+0x1e>
 8001b28:	0800264c 	.word	0x0800264c
 8001b2c:	0800264c 	.word	0x0800264c
 8001b30:	0800264c 	.word	0x0800264c
 8001b34:	08002650 	.word	0x08002650

08001b38 <memcpy>:
 8001b38:	440a      	add	r2, r1
 8001b3a:	4291      	cmp	r1, r2
 8001b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001b40:	d100      	bne.n	8001b44 <memcpy+0xc>
 8001b42:	4770      	bx	lr
 8001b44:	b510      	push	{r4, lr}
 8001b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b4e:	4291      	cmp	r1, r2
 8001b50:	d1f9      	bne.n	8001b46 <memcpy+0xe>
 8001b52:	bd10      	pop	{r4, pc}

08001b54 <memset>:
 8001b54:	4402      	add	r2, r0
 8001b56:	4603      	mov	r3, r0
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d100      	bne.n	8001b5e <memset+0xa>
 8001b5c:	4770      	bx	lr
 8001b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b62:	e7f9      	b.n	8001b58 <memset+0x4>

08001b64 <_puts_r>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	460e      	mov	r6, r1
 8001b68:	4605      	mov	r5, r0
 8001b6a:	b118      	cbz	r0, 8001b74 <_puts_r+0x10>
 8001b6c:	6983      	ldr	r3, [r0, #24]
 8001b6e:	b90b      	cbnz	r3, 8001b74 <_puts_r+0x10>
 8001b70:	f000 fa44 	bl	8001ffc <__sinit>
 8001b74:	69ab      	ldr	r3, [r5, #24]
 8001b76:	68ac      	ldr	r4, [r5, #8]
 8001b78:	b913      	cbnz	r3, 8001b80 <_puts_r+0x1c>
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f000 fa3e 	bl	8001ffc <__sinit>
 8001b80:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <_puts_r+0xd0>)
 8001b82:	429c      	cmp	r4, r3
 8001b84:	d120      	bne.n	8001bc8 <_puts_r+0x64>
 8001b86:	686c      	ldr	r4, [r5, #4]
 8001b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b8a:	07db      	lsls	r3, r3, #31
 8001b8c:	d405      	bmi.n	8001b9a <_puts_r+0x36>
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	0598      	lsls	r0, r3, #22
 8001b92:	d402      	bmi.n	8001b9a <_puts_r+0x36>
 8001b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b96:	f000 facf 	bl	8002138 <__retarget_lock_acquire_recursive>
 8001b9a:	89a3      	ldrh	r3, [r4, #12]
 8001b9c:	0719      	lsls	r1, r3, #28
 8001b9e:	d51d      	bpl.n	8001bdc <_puts_r+0x78>
 8001ba0:	6923      	ldr	r3, [r4, #16]
 8001ba2:	b1db      	cbz	r3, 8001bdc <_puts_r+0x78>
 8001ba4:	3e01      	subs	r6, #1
 8001ba6:	68a3      	ldr	r3, [r4, #8]
 8001ba8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001bac:	3b01      	subs	r3, #1
 8001bae:	60a3      	str	r3, [r4, #8]
 8001bb0:	bb39      	cbnz	r1, 8001c02 <_puts_r+0x9e>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da38      	bge.n	8001c28 <_puts_r+0xc4>
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	210a      	movs	r1, #10
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f000 f848 	bl	8001c50 <__swbuf_r>
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	d011      	beq.n	8001be8 <_puts_r+0x84>
 8001bc4:	250a      	movs	r5, #10
 8001bc6:	e011      	b.n	8001bec <_puts_r+0x88>
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <_puts_r+0xd4>)
 8001bca:	429c      	cmp	r4, r3
 8001bcc:	d101      	bne.n	8001bd2 <_puts_r+0x6e>
 8001bce:	68ac      	ldr	r4, [r5, #8]
 8001bd0:	e7da      	b.n	8001b88 <_puts_r+0x24>
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <_puts_r+0xd8>)
 8001bd4:	429c      	cmp	r4, r3
 8001bd6:	bf08      	it	eq
 8001bd8:	68ec      	ldreq	r4, [r5, #12]
 8001bda:	e7d5      	b.n	8001b88 <_puts_r+0x24>
 8001bdc:	4621      	mov	r1, r4
 8001bde:	4628      	mov	r0, r5
 8001be0:	f000 f888 	bl	8001cf4 <__swsetup_r>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d0dd      	beq.n	8001ba4 <_puts_r+0x40>
 8001be8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bee:	07da      	lsls	r2, r3, #31
 8001bf0:	d405      	bmi.n	8001bfe <_puts_r+0x9a>
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	059b      	lsls	r3, r3, #22
 8001bf6:	d402      	bmi.n	8001bfe <_puts_r+0x9a>
 8001bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bfa:	f000 fa9e 	bl	800213a <__retarget_lock_release_recursive>
 8001bfe:	4628      	mov	r0, r5
 8001c00:	bd70      	pop	{r4, r5, r6, pc}
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da04      	bge.n	8001c10 <_puts_r+0xac>
 8001c06:	69a2      	ldr	r2, [r4, #24]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dc06      	bgt.n	8001c1a <_puts_r+0xb6>
 8001c0c:	290a      	cmp	r1, #10
 8001c0e:	d004      	beq.n	8001c1a <_puts_r+0xb6>
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	6022      	str	r2, [r4, #0]
 8001c16:	7019      	strb	r1, [r3, #0]
 8001c18:	e7c5      	b.n	8001ba6 <_puts_r+0x42>
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f000 f817 	bl	8001c50 <__swbuf_r>
 8001c22:	3001      	adds	r0, #1
 8001c24:	d1bf      	bne.n	8001ba6 <_puts_r+0x42>
 8001c26:	e7df      	b.n	8001be8 <_puts_r+0x84>
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	250a      	movs	r5, #10
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	6022      	str	r2, [r4, #0]
 8001c30:	701d      	strb	r5, [r3, #0]
 8001c32:	e7db      	b.n	8001bec <_puts_r+0x88>
 8001c34:	0800260c 	.word	0x0800260c
 8001c38:	0800262c 	.word	0x0800262c
 8001c3c:	080025ec 	.word	0x080025ec

08001c40 <puts>:
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <puts+0xc>)
 8001c42:	4601      	mov	r1, r0
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	f7ff bf8d 	b.w	8001b64 <_puts_r>
 8001c4a:	bf00      	nop
 8001c4c:	20000014 	.word	0x20000014

08001c50 <__swbuf_r>:
 8001c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c52:	460e      	mov	r6, r1
 8001c54:	4614      	mov	r4, r2
 8001c56:	4605      	mov	r5, r0
 8001c58:	b118      	cbz	r0, 8001c62 <__swbuf_r+0x12>
 8001c5a:	6983      	ldr	r3, [r0, #24]
 8001c5c:	b90b      	cbnz	r3, 8001c62 <__swbuf_r+0x12>
 8001c5e:	f000 f9cd 	bl	8001ffc <__sinit>
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <__swbuf_r+0x98>)
 8001c64:	429c      	cmp	r4, r3
 8001c66:	d12b      	bne.n	8001cc0 <__swbuf_r+0x70>
 8001c68:	686c      	ldr	r4, [r5, #4]
 8001c6a:	69a3      	ldr	r3, [r4, #24]
 8001c6c:	60a3      	str	r3, [r4, #8]
 8001c6e:	89a3      	ldrh	r3, [r4, #12]
 8001c70:	071a      	lsls	r2, r3, #28
 8001c72:	d52f      	bpl.n	8001cd4 <__swbuf_r+0x84>
 8001c74:	6923      	ldr	r3, [r4, #16]
 8001c76:	b36b      	cbz	r3, 8001cd4 <__swbuf_r+0x84>
 8001c78:	6923      	ldr	r3, [r4, #16]
 8001c7a:	6820      	ldr	r0, [r4, #0]
 8001c7c:	1ac0      	subs	r0, r0, r3
 8001c7e:	6963      	ldr	r3, [r4, #20]
 8001c80:	b2f6      	uxtb	r6, r6
 8001c82:	4283      	cmp	r3, r0
 8001c84:	4637      	mov	r7, r6
 8001c86:	dc04      	bgt.n	8001c92 <__swbuf_r+0x42>
 8001c88:	4621      	mov	r1, r4
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f000 f922 	bl	8001ed4 <_fflush_r>
 8001c90:	bb30      	cbnz	r0, 8001ce0 <__swbuf_r+0x90>
 8001c92:	68a3      	ldr	r3, [r4, #8]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60a3      	str	r3, [r4, #8]
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	6022      	str	r2, [r4, #0]
 8001c9e:	701e      	strb	r6, [r3, #0]
 8001ca0:	6963      	ldr	r3, [r4, #20]
 8001ca2:	3001      	adds	r0, #1
 8001ca4:	4283      	cmp	r3, r0
 8001ca6:	d004      	beq.n	8001cb2 <__swbuf_r+0x62>
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	07db      	lsls	r3, r3, #31
 8001cac:	d506      	bpl.n	8001cbc <__swbuf_r+0x6c>
 8001cae:	2e0a      	cmp	r6, #10
 8001cb0:	d104      	bne.n	8001cbc <__swbuf_r+0x6c>
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	f000 f90d 	bl	8001ed4 <_fflush_r>
 8001cba:	b988      	cbnz	r0, 8001ce0 <__swbuf_r+0x90>
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <__swbuf_r+0x9c>)
 8001cc2:	429c      	cmp	r4, r3
 8001cc4:	d101      	bne.n	8001cca <__swbuf_r+0x7a>
 8001cc6:	68ac      	ldr	r4, [r5, #8]
 8001cc8:	e7cf      	b.n	8001c6a <__swbuf_r+0x1a>
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <__swbuf_r+0xa0>)
 8001ccc:	429c      	cmp	r4, r3
 8001cce:	bf08      	it	eq
 8001cd0:	68ec      	ldreq	r4, [r5, #12]
 8001cd2:	e7ca      	b.n	8001c6a <__swbuf_r+0x1a>
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f000 f80c 	bl	8001cf4 <__swsetup_r>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d0cb      	beq.n	8001c78 <__swbuf_r+0x28>
 8001ce0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ce4:	e7ea      	b.n	8001cbc <__swbuf_r+0x6c>
 8001ce6:	bf00      	nop
 8001ce8:	0800260c 	.word	0x0800260c
 8001cec:	0800262c 	.word	0x0800262c
 8001cf0:	080025ec 	.word	0x080025ec

08001cf4 <__swsetup_r>:
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <__swsetup_r+0xcc>)
 8001cf6:	b570      	push	{r4, r5, r6, lr}
 8001cf8:	681d      	ldr	r5, [r3, #0]
 8001cfa:	4606      	mov	r6, r0
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	b125      	cbz	r5, 8001d0a <__swsetup_r+0x16>
 8001d00:	69ab      	ldr	r3, [r5, #24]
 8001d02:	b913      	cbnz	r3, 8001d0a <__swsetup_r+0x16>
 8001d04:	4628      	mov	r0, r5
 8001d06:	f000 f979 	bl	8001ffc <__sinit>
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <__swsetup_r+0xd0>)
 8001d0c:	429c      	cmp	r4, r3
 8001d0e:	d10f      	bne.n	8001d30 <__swsetup_r+0x3c>
 8001d10:	686c      	ldr	r4, [r5, #4]
 8001d12:	89a3      	ldrh	r3, [r4, #12]
 8001d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d18:	0719      	lsls	r1, r3, #28
 8001d1a:	d42c      	bmi.n	8001d76 <__swsetup_r+0x82>
 8001d1c:	06dd      	lsls	r5, r3, #27
 8001d1e:	d411      	bmi.n	8001d44 <__swsetup_r+0x50>
 8001d20:	2309      	movs	r3, #9
 8001d22:	6033      	str	r3, [r6, #0]
 8001d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d28:	81a3      	strh	r3, [r4, #12]
 8001d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d2e:	e03e      	b.n	8001dae <__swsetup_r+0xba>
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <__swsetup_r+0xd4>)
 8001d32:	429c      	cmp	r4, r3
 8001d34:	d101      	bne.n	8001d3a <__swsetup_r+0x46>
 8001d36:	68ac      	ldr	r4, [r5, #8]
 8001d38:	e7eb      	b.n	8001d12 <__swsetup_r+0x1e>
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <__swsetup_r+0xd8>)
 8001d3c:	429c      	cmp	r4, r3
 8001d3e:	bf08      	it	eq
 8001d40:	68ec      	ldreq	r4, [r5, #12]
 8001d42:	e7e6      	b.n	8001d12 <__swsetup_r+0x1e>
 8001d44:	0758      	lsls	r0, r3, #29
 8001d46:	d512      	bpl.n	8001d6e <__swsetup_r+0x7a>
 8001d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d4a:	b141      	cbz	r1, 8001d5e <__swsetup_r+0x6a>
 8001d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d50:	4299      	cmp	r1, r3
 8001d52:	d002      	beq.n	8001d5a <__swsetup_r+0x66>
 8001d54:	4630      	mov	r0, r6
 8001d56:	f000 fa57 	bl	8002208 <_free_r>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8001d5e:	89a3      	ldrh	r3, [r4, #12]
 8001d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d64:	81a3      	strh	r3, [r4, #12]
 8001d66:	2300      	movs	r3, #0
 8001d68:	6063      	str	r3, [r4, #4]
 8001d6a:	6923      	ldr	r3, [r4, #16]
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	89a3      	ldrh	r3, [r4, #12]
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	81a3      	strh	r3, [r4, #12]
 8001d76:	6923      	ldr	r3, [r4, #16]
 8001d78:	b94b      	cbnz	r3, 8001d8e <__swsetup_r+0x9a>
 8001d7a:	89a3      	ldrh	r3, [r4, #12]
 8001d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d003      	beq.n	8001d8e <__swsetup_r+0x9a>
 8001d86:	4621      	mov	r1, r4
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f000 f9fd 	bl	8002188 <__smakebuf_r>
 8001d8e:	89a0      	ldrh	r0, [r4, #12]
 8001d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d94:	f010 0301 	ands.w	r3, r0, #1
 8001d98:	d00a      	beq.n	8001db0 <__swsetup_r+0xbc>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60a3      	str	r3, [r4, #8]
 8001d9e:	6963      	ldr	r3, [r4, #20]
 8001da0:	425b      	negs	r3, r3
 8001da2:	61a3      	str	r3, [r4, #24]
 8001da4:	6923      	ldr	r3, [r4, #16]
 8001da6:	b943      	cbnz	r3, 8001dba <__swsetup_r+0xc6>
 8001da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001dac:	d1ba      	bne.n	8001d24 <__swsetup_r+0x30>
 8001dae:	bd70      	pop	{r4, r5, r6, pc}
 8001db0:	0781      	lsls	r1, r0, #30
 8001db2:	bf58      	it	pl
 8001db4:	6963      	ldrpl	r3, [r4, #20]
 8001db6:	60a3      	str	r3, [r4, #8]
 8001db8:	e7f4      	b.n	8001da4 <__swsetup_r+0xb0>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	e7f7      	b.n	8001dae <__swsetup_r+0xba>
 8001dbe:	bf00      	nop
 8001dc0:	20000014 	.word	0x20000014
 8001dc4:	0800260c 	.word	0x0800260c
 8001dc8:	0800262c 	.word	0x0800262c
 8001dcc:	080025ec 	.word	0x080025ec

08001dd0 <__sflush_r>:
 8001dd0:	898a      	ldrh	r2, [r1, #12]
 8001dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	0710      	lsls	r0, r2, #28
 8001dd8:	460c      	mov	r4, r1
 8001dda:	d457      	bmi.n	8001e8c <__sflush_r+0xbc>
 8001ddc:	684b      	ldr	r3, [r1, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	dc04      	bgt.n	8001dec <__sflush_r+0x1c>
 8001de2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	dc01      	bgt.n	8001dec <__sflush_r+0x1c>
 8001de8:	2000      	movs	r0, #0
 8001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001dee:	2e00      	cmp	r6, #0
 8001df0:	d0fa      	beq.n	8001de8 <__sflush_r+0x18>
 8001df2:	2300      	movs	r3, #0
 8001df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001df8:	682f      	ldr	r7, [r5, #0]
 8001dfa:	602b      	str	r3, [r5, #0]
 8001dfc:	d032      	beq.n	8001e64 <__sflush_r+0x94>
 8001dfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e00:	89a3      	ldrh	r3, [r4, #12]
 8001e02:	075a      	lsls	r2, r3, #29
 8001e04:	d505      	bpl.n	8001e12 <__sflush_r+0x42>
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	1ac0      	subs	r0, r0, r3
 8001e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e0c:	b10b      	cbz	r3, 8001e12 <__sflush_r+0x42>
 8001e0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e10:	1ac0      	subs	r0, r0, r3
 8001e12:	2300      	movs	r3, #0
 8001e14:	4602      	mov	r2, r0
 8001e16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e18:	6a21      	ldr	r1, [r4, #32]
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	47b0      	blx	r6
 8001e1e:	1c43      	adds	r3, r0, #1
 8001e20:	89a3      	ldrh	r3, [r4, #12]
 8001e22:	d106      	bne.n	8001e32 <__sflush_r+0x62>
 8001e24:	6829      	ldr	r1, [r5, #0]
 8001e26:	291d      	cmp	r1, #29
 8001e28:	d82c      	bhi.n	8001e84 <__sflush_r+0xb4>
 8001e2a:	4a29      	ldr	r2, [pc, #164]	; (8001ed0 <__sflush_r+0x100>)
 8001e2c:	40ca      	lsrs	r2, r1
 8001e2e:	07d6      	lsls	r6, r2, #31
 8001e30:	d528      	bpl.n	8001e84 <__sflush_r+0xb4>
 8001e32:	2200      	movs	r2, #0
 8001e34:	6062      	str	r2, [r4, #4]
 8001e36:	04d9      	lsls	r1, r3, #19
 8001e38:	6922      	ldr	r2, [r4, #16]
 8001e3a:	6022      	str	r2, [r4, #0]
 8001e3c:	d504      	bpl.n	8001e48 <__sflush_r+0x78>
 8001e3e:	1c42      	adds	r2, r0, #1
 8001e40:	d101      	bne.n	8001e46 <__sflush_r+0x76>
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	b903      	cbnz	r3, 8001e48 <__sflush_r+0x78>
 8001e46:	6560      	str	r0, [r4, #84]	; 0x54
 8001e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e4a:	602f      	str	r7, [r5, #0]
 8001e4c:	2900      	cmp	r1, #0
 8001e4e:	d0cb      	beq.n	8001de8 <__sflush_r+0x18>
 8001e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e54:	4299      	cmp	r1, r3
 8001e56:	d002      	beq.n	8001e5e <__sflush_r+0x8e>
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f000 f9d5 	bl	8002208 <_free_r>
 8001e5e:	2000      	movs	r0, #0
 8001e60:	6360      	str	r0, [r4, #52]	; 0x34
 8001e62:	e7c2      	b.n	8001dea <__sflush_r+0x1a>
 8001e64:	6a21      	ldr	r1, [r4, #32]
 8001e66:	2301      	movs	r3, #1
 8001e68:	4628      	mov	r0, r5
 8001e6a:	47b0      	blx	r6
 8001e6c:	1c41      	adds	r1, r0, #1
 8001e6e:	d1c7      	bne.n	8001e00 <__sflush_r+0x30>
 8001e70:	682b      	ldr	r3, [r5, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0c4      	beq.n	8001e00 <__sflush_r+0x30>
 8001e76:	2b1d      	cmp	r3, #29
 8001e78:	d001      	beq.n	8001e7e <__sflush_r+0xae>
 8001e7a:	2b16      	cmp	r3, #22
 8001e7c:	d101      	bne.n	8001e82 <__sflush_r+0xb2>
 8001e7e:	602f      	str	r7, [r5, #0]
 8001e80:	e7b2      	b.n	8001de8 <__sflush_r+0x18>
 8001e82:	89a3      	ldrh	r3, [r4, #12]
 8001e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e88:	81a3      	strh	r3, [r4, #12]
 8001e8a:	e7ae      	b.n	8001dea <__sflush_r+0x1a>
 8001e8c:	690f      	ldr	r7, [r1, #16]
 8001e8e:	2f00      	cmp	r7, #0
 8001e90:	d0aa      	beq.n	8001de8 <__sflush_r+0x18>
 8001e92:	0793      	lsls	r3, r2, #30
 8001e94:	680e      	ldr	r6, [r1, #0]
 8001e96:	bf08      	it	eq
 8001e98:	694b      	ldreq	r3, [r1, #20]
 8001e9a:	600f      	str	r7, [r1, #0]
 8001e9c:	bf18      	it	ne
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	1bf6      	subs	r6, r6, r7
 8001ea2:	608b      	str	r3, [r1, #8]
 8001ea4:	2e00      	cmp	r6, #0
 8001ea6:	dd9f      	ble.n	8001de8 <__sflush_r+0x18>
 8001ea8:	6a21      	ldr	r1, [r4, #32]
 8001eaa:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001eae:	4633      	mov	r3, r6
 8001eb0:	463a      	mov	r2, r7
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	47e0      	blx	ip
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	dc06      	bgt.n	8001ec8 <__sflush_r+0xf8>
 8001eba:	89a3      	ldrh	r3, [r4, #12]
 8001ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec0:	81a3      	strh	r3, [r4, #12]
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec6:	e790      	b.n	8001dea <__sflush_r+0x1a>
 8001ec8:	4407      	add	r7, r0
 8001eca:	1a36      	subs	r6, r6, r0
 8001ecc:	e7ea      	b.n	8001ea4 <__sflush_r+0xd4>
 8001ece:	bf00      	nop
 8001ed0:	20400001 	.word	0x20400001

08001ed4 <_fflush_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	690b      	ldr	r3, [r1, #16]
 8001ed8:	4605      	mov	r5, r0
 8001eda:	460c      	mov	r4, r1
 8001edc:	b913      	cbnz	r3, 8001ee4 <_fflush_r+0x10>
 8001ede:	2500      	movs	r5, #0
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	b118      	cbz	r0, 8001eee <_fflush_r+0x1a>
 8001ee6:	6983      	ldr	r3, [r0, #24]
 8001ee8:	b90b      	cbnz	r3, 8001eee <_fflush_r+0x1a>
 8001eea:	f000 f887 	bl	8001ffc <__sinit>
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <_fflush_r+0x6c>)
 8001ef0:	429c      	cmp	r4, r3
 8001ef2:	d11b      	bne.n	8001f2c <_fflush_r+0x58>
 8001ef4:	686c      	ldr	r4, [r5, #4]
 8001ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0ef      	beq.n	8001ede <_fflush_r+0xa>
 8001efe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f00:	07d0      	lsls	r0, r2, #31
 8001f02:	d404      	bmi.n	8001f0e <_fflush_r+0x3a>
 8001f04:	0599      	lsls	r1, r3, #22
 8001f06:	d402      	bmi.n	8001f0e <_fflush_r+0x3a>
 8001f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f0a:	f000 f915 	bl	8002138 <__retarget_lock_acquire_recursive>
 8001f0e:	4628      	mov	r0, r5
 8001f10:	4621      	mov	r1, r4
 8001f12:	f7ff ff5d 	bl	8001dd0 <__sflush_r>
 8001f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f18:	07da      	lsls	r2, r3, #31
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	d4e0      	bmi.n	8001ee0 <_fflush_r+0xc>
 8001f1e:	89a3      	ldrh	r3, [r4, #12]
 8001f20:	059b      	lsls	r3, r3, #22
 8001f22:	d4dd      	bmi.n	8001ee0 <_fflush_r+0xc>
 8001f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f26:	f000 f908 	bl	800213a <__retarget_lock_release_recursive>
 8001f2a:	e7d9      	b.n	8001ee0 <_fflush_r+0xc>
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <_fflush_r+0x70>)
 8001f2e:	429c      	cmp	r4, r3
 8001f30:	d101      	bne.n	8001f36 <_fflush_r+0x62>
 8001f32:	68ac      	ldr	r4, [r5, #8]
 8001f34:	e7df      	b.n	8001ef6 <_fflush_r+0x22>
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <_fflush_r+0x74>)
 8001f38:	429c      	cmp	r4, r3
 8001f3a:	bf08      	it	eq
 8001f3c:	68ec      	ldreq	r4, [r5, #12]
 8001f3e:	e7da      	b.n	8001ef6 <_fflush_r+0x22>
 8001f40:	0800260c 	.word	0x0800260c
 8001f44:	0800262c 	.word	0x0800262c
 8001f48:	080025ec 	.word	0x080025ec

08001f4c <std>:
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	b510      	push	{r4, lr}
 8001f50:	4604      	mov	r4, r0
 8001f52:	e9c0 3300 	strd	r3, r3, [r0]
 8001f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f5a:	6083      	str	r3, [r0, #8]
 8001f5c:	8181      	strh	r1, [r0, #12]
 8001f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8001f60:	81c2      	strh	r2, [r0, #14]
 8001f62:	6183      	str	r3, [r0, #24]
 8001f64:	4619      	mov	r1, r3
 8001f66:	2208      	movs	r2, #8
 8001f68:	305c      	adds	r0, #92	; 0x5c
 8001f6a:	f7ff fdf3 	bl	8001b54 <memset>
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <std+0x38>)
 8001f70:	6263      	str	r3, [r4, #36]	; 0x24
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <std+0x3c>)
 8001f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <std+0x40>)
 8001f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <std+0x44>)
 8001f7c:	6224      	str	r4, [r4, #32]
 8001f7e:	6323      	str	r3, [r4, #48]	; 0x30
 8001f80:	bd10      	pop	{r4, pc}
 8001f82:	bf00      	nop
 8001f84:	080023e5 	.word	0x080023e5
 8001f88:	08002407 	.word	0x08002407
 8001f8c:	0800243f 	.word	0x0800243f
 8001f90:	08002463 	.word	0x08002463

08001f94 <_cleanup_r>:
 8001f94:	4901      	ldr	r1, [pc, #4]	; (8001f9c <_cleanup_r+0x8>)
 8001f96:	f000 b8af 	b.w	80020f8 <_fwalk_reent>
 8001f9a:	bf00      	nop
 8001f9c:	08001ed5 	.word	0x08001ed5

08001fa0 <__sfmoreglue>:
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	2268      	movs	r2, #104	; 0x68
 8001fa4:	1e4d      	subs	r5, r1, #1
 8001fa6:	4355      	muls	r5, r2
 8001fa8:	460e      	mov	r6, r1
 8001faa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fae:	f000 f995 	bl	80022dc <_malloc_r>
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	b140      	cbz	r0, 8001fc8 <__sfmoreglue+0x28>
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	e9c0 1600 	strd	r1, r6, [r0]
 8001fbc:	300c      	adds	r0, #12
 8001fbe:	60a0      	str	r0, [r4, #8]
 8001fc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001fc4:	f7ff fdc6 	bl	8001b54 <memset>
 8001fc8:	4620      	mov	r0, r4
 8001fca:	bd70      	pop	{r4, r5, r6, pc}

08001fcc <__sfp_lock_acquire>:
 8001fcc:	4801      	ldr	r0, [pc, #4]	; (8001fd4 <__sfp_lock_acquire+0x8>)
 8001fce:	f000 b8b3 	b.w	8002138 <__retarget_lock_acquire_recursive>
 8001fd2:	bf00      	nop
 8001fd4:	20001421 	.word	0x20001421

08001fd8 <__sfp_lock_release>:
 8001fd8:	4801      	ldr	r0, [pc, #4]	; (8001fe0 <__sfp_lock_release+0x8>)
 8001fda:	f000 b8ae 	b.w	800213a <__retarget_lock_release_recursive>
 8001fde:	bf00      	nop
 8001fe0:	20001421 	.word	0x20001421

08001fe4 <__sinit_lock_acquire>:
 8001fe4:	4801      	ldr	r0, [pc, #4]	; (8001fec <__sinit_lock_acquire+0x8>)
 8001fe6:	f000 b8a7 	b.w	8002138 <__retarget_lock_acquire_recursive>
 8001fea:	bf00      	nop
 8001fec:	20001422 	.word	0x20001422

08001ff0 <__sinit_lock_release>:
 8001ff0:	4801      	ldr	r0, [pc, #4]	; (8001ff8 <__sinit_lock_release+0x8>)
 8001ff2:	f000 b8a2 	b.w	800213a <__retarget_lock_release_recursive>
 8001ff6:	bf00      	nop
 8001ff8:	20001422 	.word	0x20001422

08001ffc <__sinit>:
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4604      	mov	r4, r0
 8002000:	f7ff fff0 	bl	8001fe4 <__sinit_lock_acquire>
 8002004:	69a3      	ldr	r3, [r4, #24]
 8002006:	b11b      	cbz	r3, 8002010 <__sinit+0x14>
 8002008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800200c:	f7ff bff0 	b.w	8001ff0 <__sinit_lock_release>
 8002010:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002014:	6523      	str	r3, [r4, #80]	; 0x50
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <__sinit+0x68>)
 8002018:	4a13      	ldr	r2, [pc, #76]	; (8002068 <__sinit+0x6c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	62a2      	str	r2, [r4, #40]	; 0x28
 800201e:	42a3      	cmp	r3, r4
 8002020:	bf04      	itt	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	61a3      	streq	r3, [r4, #24]
 8002026:	4620      	mov	r0, r4
 8002028:	f000 f820 	bl	800206c <__sfp>
 800202c:	6060      	str	r0, [r4, #4]
 800202e:	4620      	mov	r0, r4
 8002030:	f000 f81c 	bl	800206c <__sfp>
 8002034:	60a0      	str	r0, [r4, #8]
 8002036:	4620      	mov	r0, r4
 8002038:	f000 f818 	bl	800206c <__sfp>
 800203c:	2200      	movs	r2, #0
 800203e:	60e0      	str	r0, [r4, #12]
 8002040:	2104      	movs	r1, #4
 8002042:	6860      	ldr	r0, [r4, #4]
 8002044:	f7ff ff82 	bl	8001f4c <std>
 8002048:	68a0      	ldr	r0, [r4, #8]
 800204a:	2201      	movs	r2, #1
 800204c:	2109      	movs	r1, #9
 800204e:	f7ff ff7d 	bl	8001f4c <std>
 8002052:	68e0      	ldr	r0, [r4, #12]
 8002054:	2202      	movs	r2, #2
 8002056:	2112      	movs	r1, #18
 8002058:	f7ff ff78 	bl	8001f4c <std>
 800205c:	2301      	movs	r3, #1
 800205e:	61a3      	str	r3, [r4, #24]
 8002060:	e7d2      	b.n	8002008 <__sinit+0xc>
 8002062:	bf00      	nop
 8002064:	080025e8 	.word	0x080025e8
 8002068:	08001f95 	.word	0x08001f95

0800206c <__sfp>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	4607      	mov	r7, r0
 8002070:	f7ff ffac 	bl	8001fcc <__sfp_lock_acquire>
 8002074:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <__sfp+0x84>)
 8002076:	681e      	ldr	r6, [r3, #0]
 8002078:	69b3      	ldr	r3, [r6, #24]
 800207a:	b913      	cbnz	r3, 8002082 <__sfp+0x16>
 800207c:	4630      	mov	r0, r6
 800207e:	f7ff ffbd 	bl	8001ffc <__sinit>
 8002082:	3648      	adds	r6, #72	; 0x48
 8002084:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002088:	3b01      	subs	r3, #1
 800208a:	d503      	bpl.n	8002094 <__sfp+0x28>
 800208c:	6833      	ldr	r3, [r6, #0]
 800208e:	b30b      	cbz	r3, 80020d4 <__sfp+0x68>
 8002090:	6836      	ldr	r6, [r6, #0]
 8002092:	e7f7      	b.n	8002084 <__sfp+0x18>
 8002094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002098:	b9d5      	cbnz	r5, 80020d0 <__sfp+0x64>
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <__sfp+0x88>)
 800209c:	60e3      	str	r3, [r4, #12]
 800209e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020a2:	6665      	str	r5, [r4, #100]	; 0x64
 80020a4:	f000 f847 	bl	8002136 <__retarget_lock_init_recursive>
 80020a8:	f7ff ff96 	bl	8001fd8 <__sfp_lock_release>
 80020ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020b4:	6025      	str	r5, [r4, #0]
 80020b6:	61a5      	str	r5, [r4, #24]
 80020b8:	2208      	movs	r2, #8
 80020ba:	4629      	mov	r1, r5
 80020bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020c0:	f7ff fd48 	bl	8001b54 <memset>
 80020c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020cc:	4620      	mov	r0, r4
 80020ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d0:	3468      	adds	r4, #104	; 0x68
 80020d2:	e7d9      	b.n	8002088 <__sfp+0x1c>
 80020d4:	2104      	movs	r1, #4
 80020d6:	4638      	mov	r0, r7
 80020d8:	f7ff ff62 	bl	8001fa0 <__sfmoreglue>
 80020dc:	4604      	mov	r4, r0
 80020de:	6030      	str	r0, [r6, #0]
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d1d5      	bne.n	8002090 <__sfp+0x24>
 80020e4:	f7ff ff78 	bl	8001fd8 <__sfp_lock_release>
 80020e8:	230c      	movs	r3, #12
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	e7ee      	b.n	80020cc <__sfp+0x60>
 80020ee:	bf00      	nop
 80020f0:	080025e8 	.word	0x080025e8
 80020f4:	ffff0001 	.word	0xffff0001

080020f8 <_fwalk_reent>:
 80020f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020fc:	4606      	mov	r6, r0
 80020fe:	4688      	mov	r8, r1
 8002100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002104:	2700      	movs	r7, #0
 8002106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800210a:	f1b9 0901 	subs.w	r9, r9, #1
 800210e:	d505      	bpl.n	800211c <_fwalk_reent+0x24>
 8002110:	6824      	ldr	r4, [r4, #0]
 8002112:	2c00      	cmp	r4, #0
 8002114:	d1f7      	bne.n	8002106 <_fwalk_reent+0xe>
 8002116:	4638      	mov	r0, r7
 8002118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800211c:	89ab      	ldrh	r3, [r5, #12]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d907      	bls.n	8002132 <_fwalk_reent+0x3a>
 8002122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002126:	3301      	adds	r3, #1
 8002128:	d003      	beq.n	8002132 <_fwalk_reent+0x3a>
 800212a:	4629      	mov	r1, r5
 800212c:	4630      	mov	r0, r6
 800212e:	47c0      	blx	r8
 8002130:	4307      	orrs	r7, r0
 8002132:	3568      	adds	r5, #104	; 0x68
 8002134:	e7e9      	b.n	800210a <_fwalk_reent+0x12>

08002136 <__retarget_lock_init_recursive>:
 8002136:	4770      	bx	lr

08002138 <__retarget_lock_acquire_recursive>:
 8002138:	4770      	bx	lr

0800213a <__retarget_lock_release_recursive>:
 800213a:	4770      	bx	lr

0800213c <__swhatbuf_r>:
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	460e      	mov	r6, r1
 8002140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002144:	2900      	cmp	r1, #0
 8002146:	b096      	sub	sp, #88	; 0x58
 8002148:	4614      	mov	r4, r2
 800214a:	461d      	mov	r5, r3
 800214c:	da08      	bge.n	8002160 <__swhatbuf_r+0x24>
 800214e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	602a      	str	r2, [r5, #0]
 8002156:	061a      	lsls	r2, r3, #24
 8002158:	d410      	bmi.n	800217c <__swhatbuf_r+0x40>
 800215a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215e:	e00e      	b.n	800217e <__swhatbuf_r+0x42>
 8002160:	466a      	mov	r2, sp
 8002162:	f000 f9a5 	bl	80024b0 <_fstat_r>
 8002166:	2800      	cmp	r0, #0
 8002168:	dbf1      	blt.n	800214e <__swhatbuf_r+0x12>
 800216a:	9a01      	ldr	r2, [sp, #4]
 800216c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002170:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002174:	425a      	negs	r2, r3
 8002176:	415a      	adcs	r2, r3
 8002178:	602a      	str	r2, [r5, #0]
 800217a:	e7ee      	b.n	800215a <__swhatbuf_r+0x1e>
 800217c:	2340      	movs	r3, #64	; 0x40
 800217e:	2000      	movs	r0, #0
 8002180:	6023      	str	r3, [r4, #0]
 8002182:	b016      	add	sp, #88	; 0x58
 8002184:	bd70      	pop	{r4, r5, r6, pc}
 8002186:	0000      	movs	r0, r0

08002188 <__smakebuf_r>:
 8002188:	898b      	ldrh	r3, [r1, #12]
 800218a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800218c:	079d      	lsls	r5, r3, #30
 800218e:	4606      	mov	r6, r0
 8002190:	460c      	mov	r4, r1
 8002192:	d507      	bpl.n	80021a4 <__smakebuf_r+0x1c>
 8002194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	6123      	str	r3, [r4, #16]
 800219c:	2301      	movs	r3, #1
 800219e:	6163      	str	r3, [r4, #20]
 80021a0:	b002      	add	sp, #8
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	ab01      	add	r3, sp, #4
 80021a6:	466a      	mov	r2, sp
 80021a8:	f7ff ffc8 	bl	800213c <__swhatbuf_r>
 80021ac:	9900      	ldr	r1, [sp, #0]
 80021ae:	4605      	mov	r5, r0
 80021b0:	4630      	mov	r0, r6
 80021b2:	f000 f893 	bl	80022dc <_malloc_r>
 80021b6:	b948      	cbnz	r0, 80021cc <__smakebuf_r+0x44>
 80021b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021bc:	059a      	lsls	r2, r3, #22
 80021be:	d4ef      	bmi.n	80021a0 <__smakebuf_r+0x18>
 80021c0:	f023 0303 	bic.w	r3, r3, #3
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	81a3      	strh	r3, [r4, #12]
 80021ca:	e7e3      	b.n	8002194 <__smakebuf_r+0xc>
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <__smakebuf_r+0x7c>)
 80021ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80021d0:	89a3      	ldrh	r3, [r4, #12]
 80021d2:	6020      	str	r0, [r4, #0]
 80021d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d8:	81a3      	strh	r3, [r4, #12]
 80021da:	9b00      	ldr	r3, [sp, #0]
 80021dc:	6163      	str	r3, [r4, #20]
 80021de:	9b01      	ldr	r3, [sp, #4]
 80021e0:	6120      	str	r0, [r4, #16]
 80021e2:	b15b      	cbz	r3, 80021fc <__smakebuf_r+0x74>
 80021e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021e8:	4630      	mov	r0, r6
 80021ea:	f000 f973 	bl	80024d4 <_isatty_r>
 80021ee:	b128      	cbz	r0, 80021fc <__smakebuf_r+0x74>
 80021f0:	89a3      	ldrh	r3, [r4, #12]
 80021f2:	f023 0303 	bic.w	r3, r3, #3
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	81a3      	strh	r3, [r4, #12]
 80021fc:	89a0      	ldrh	r0, [r4, #12]
 80021fe:	4305      	orrs	r5, r0
 8002200:	81a5      	strh	r5, [r4, #12]
 8002202:	e7cd      	b.n	80021a0 <__smakebuf_r+0x18>
 8002204:	08001f95 	.word	0x08001f95

08002208 <_free_r>:
 8002208:	b538      	push	{r3, r4, r5, lr}
 800220a:	4605      	mov	r5, r0
 800220c:	2900      	cmp	r1, #0
 800220e:	d041      	beq.n	8002294 <_free_r+0x8c>
 8002210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002214:	1f0c      	subs	r4, r1, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	bfb8      	it	lt
 800221a:	18e4      	addlt	r4, r4, r3
 800221c:	f000 f97c 	bl	8002518 <__malloc_lock>
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <_free_r+0x90>)
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	b933      	cbnz	r3, 8002234 <_free_r+0x2c>
 8002226:	6063      	str	r3, [r4, #4]
 8002228:	6014      	str	r4, [r2, #0]
 800222a:	4628      	mov	r0, r5
 800222c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002230:	f000 b978 	b.w	8002524 <__malloc_unlock>
 8002234:	42a3      	cmp	r3, r4
 8002236:	d908      	bls.n	800224a <_free_r+0x42>
 8002238:	6820      	ldr	r0, [r4, #0]
 800223a:	1821      	adds	r1, r4, r0
 800223c:	428b      	cmp	r3, r1
 800223e:	bf01      	itttt	eq
 8002240:	6819      	ldreq	r1, [r3, #0]
 8002242:	685b      	ldreq	r3, [r3, #4]
 8002244:	1809      	addeq	r1, r1, r0
 8002246:	6021      	streq	r1, [r4, #0]
 8002248:	e7ed      	b.n	8002226 <_free_r+0x1e>
 800224a:	461a      	mov	r2, r3
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	b10b      	cbz	r3, 8002254 <_free_r+0x4c>
 8002250:	42a3      	cmp	r3, r4
 8002252:	d9fa      	bls.n	800224a <_free_r+0x42>
 8002254:	6811      	ldr	r1, [r2, #0]
 8002256:	1850      	adds	r0, r2, r1
 8002258:	42a0      	cmp	r0, r4
 800225a:	d10b      	bne.n	8002274 <_free_r+0x6c>
 800225c:	6820      	ldr	r0, [r4, #0]
 800225e:	4401      	add	r1, r0
 8002260:	1850      	adds	r0, r2, r1
 8002262:	4283      	cmp	r3, r0
 8002264:	6011      	str	r1, [r2, #0]
 8002266:	d1e0      	bne.n	800222a <_free_r+0x22>
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	6053      	str	r3, [r2, #4]
 800226e:	4401      	add	r1, r0
 8002270:	6011      	str	r1, [r2, #0]
 8002272:	e7da      	b.n	800222a <_free_r+0x22>
 8002274:	d902      	bls.n	800227c <_free_r+0x74>
 8002276:	230c      	movs	r3, #12
 8002278:	602b      	str	r3, [r5, #0]
 800227a:	e7d6      	b.n	800222a <_free_r+0x22>
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	1821      	adds	r1, r4, r0
 8002280:	428b      	cmp	r3, r1
 8002282:	bf04      	itt	eq
 8002284:	6819      	ldreq	r1, [r3, #0]
 8002286:	685b      	ldreq	r3, [r3, #4]
 8002288:	6063      	str	r3, [r4, #4]
 800228a:	bf04      	itt	eq
 800228c:	1809      	addeq	r1, r1, r0
 800228e:	6021      	streq	r1, [r4, #0]
 8002290:	6054      	str	r4, [r2, #4]
 8002292:	e7ca      	b.n	800222a <_free_r+0x22>
 8002294:	bd38      	pop	{r3, r4, r5, pc}
 8002296:	bf00      	nop
 8002298:	20001424 	.word	0x20001424

0800229c <sbrk_aligned>:
 800229c:	b570      	push	{r4, r5, r6, lr}
 800229e:	4e0e      	ldr	r6, [pc, #56]	; (80022d8 <sbrk_aligned+0x3c>)
 80022a0:	460c      	mov	r4, r1
 80022a2:	6831      	ldr	r1, [r6, #0]
 80022a4:	4605      	mov	r5, r0
 80022a6:	b911      	cbnz	r1, 80022ae <sbrk_aligned+0x12>
 80022a8:	f000 f88c 	bl	80023c4 <_sbrk_r>
 80022ac:	6030      	str	r0, [r6, #0]
 80022ae:	4621      	mov	r1, r4
 80022b0:	4628      	mov	r0, r5
 80022b2:	f000 f887 	bl	80023c4 <_sbrk_r>
 80022b6:	1c43      	adds	r3, r0, #1
 80022b8:	d00a      	beq.n	80022d0 <sbrk_aligned+0x34>
 80022ba:	1cc4      	adds	r4, r0, #3
 80022bc:	f024 0403 	bic.w	r4, r4, #3
 80022c0:	42a0      	cmp	r0, r4
 80022c2:	d007      	beq.n	80022d4 <sbrk_aligned+0x38>
 80022c4:	1a21      	subs	r1, r4, r0
 80022c6:	4628      	mov	r0, r5
 80022c8:	f000 f87c 	bl	80023c4 <_sbrk_r>
 80022cc:	3001      	adds	r0, #1
 80022ce:	d101      	bne.n	80022d4 <sbrk_aligned+0x38>
 80022d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022d4:	4620      	mov	r0, r4
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	20001428 	.word	0x20001428

080022dc <_malloc_r>:
 80022dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e0:	1ccd      	adds	r5, r1, #3
 80022e2:	f025 0503 	bic.w	r5, r5, #3
 80022e6:	3508      	adds	r5, #8
 80022e8:	2d0c      	cmp	r5, #12
 80022ea:	bf38      	it	cc
 80022ec:	250c      	movcc	r5, #12
 80022ee:	2d00      	cmp	r5, #0
 80022f0:	4607      	mov	r7, r0
 80022f2:	db01      	blt.n	80022f8 <_malloc_r+0x1c>
 80022f4:	42a9      	cmp	r1, r5
 80022f6:	d905      	bls.n	8002304 <_malloc_r+0x28>
 80022f8:	230c      	movs	r3, #12
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	2600      	movs	r6, #0
 80022fe:	4630      	mov	r0, r6
 8002300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002304:	4e2e      	ldr	r6, [pc, #184]	; (80023c0 <_malloc_r+0xe4>)
 8002306:	f000 f907 	bl	8002518 <__malloc_lock>
 800230a:	6833      	ldr	r3, [r6, #0]
 800230c:	461c      	mov	r4, r3
 800230e:	bb34      	cbnz	r4, 800235e <_malloc_r+0x82>
 8002310:	4629      	mov	r1, r5
 8002312:	4638      	mov	r0, r7
 8002314:	f7ff ffc2 	bl	800229c <sbrk_aligned>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	4604      	mov	r4, r0
 800231c:	d14d      	bne.n	80023ba <_malloc_r+0xde>
 800231e:	6834      	ldr	r4, [r6, #0]
 8002320:	4626      	mov	r6, r4
 8002322:	2e00      	cmp	r6, #0
 8002324:	d140      	bne.n	80023a8 <_malloc_r+0xcc>
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	4631      	mov	r1, r6
 800232a:	4638      	mov	r0, r7
 800232c:	eb04 0803 	add.w	r8, r4, r3
 8002330:	f000 f848 	bl	80023c4 <_sbrk_r>
 8002334:	4580      	cmp	r8, r0
 8002336:	d13a      	bne.n	80023ae <_malloc_r+0xd2>
 8002338:	6821      	ldr	r1, [r4, #0]
 800233a:	3503      	adds	r5, #3
 800233c:	1a6d      	subs	r5, r5, r1
 800233e:	f025 0503 	bic.w	r5, r5, #3
 8002342:	3508      	adds	r5, #8
 8002344:	2d0c      	cmp	r5, #12
 8002346:	bf38      	it	cc
 8002348:	250c      	movcc	r5, #12
 800234a:	4629      	mov	r1, r5
 800234c:	4638      	mov	r0, r7
 800234e:	f7ff ffa5 	bl	800229c <sbrk_aligned>
 8002352:	3001      	adds	r0, #1
 8002354:	d02b      	beq.n	80023ae <_malloc_r+0xd2>
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	442b      	add	r3, r5
 800235a:	6023      	str	r3, [r4, #0]
 800235c:	e00e      	b.n	800237c <_malloc_r+0xa0>
 800235e:	6822      	ldr	r2, [r4, #0]
 8002360:	1b52      	subs	r2, r2, r5
 8002362:	d41e      	bmi.n	80023a2 <_malloc_r+0xc6>
 8002364:	2a0b      	cmp	r2, #11
 8002366:	d916      	bls.n	8002396 <_malloc_r+0xba>
 8002368:	1961      	adds	r1, r4, r5
 800236a:	42a3      	cmp	r3, r4
 800236c:	6025      	str	r5, [r4, #0]
 800236e:	bf18      	it	ne
 8002370:	6059      	strne	r1, [r3, #4]
 8002372:	6863      	ldr	r3, [r4, #4]
 8002374:	bf08      	it	eq
 8002376:	6031      	streq	r1, [r6, #0]
 8002378:	5162      	str	r2, [r4, r5]
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	4638      	mov	r0, r7
 800237e:	f104 060b 	add.w	r6, r4, #11
 8002382:	f000 f8cf 	bl	8002524 <__malloc_unlock>
 8002386:	f026 0607 	bic.w	r6, r6, #7
 800238a:	1d23      	adds	r3, r4, #4
 800238c:	1af2      	subs	r2, r6, r3
 800238e:	d0b6      	beq.n	80022fe <_malloc_r+0x22>
 8002390:	1b9b      	subs	r3, r3, r6
 8002392:	50a3      	str	r3, [r4, r2]
 8002394:	e7b3      	b.n	80022fe <_malloc_r+0x22>
 8002396:	6862      	ldr	r2, [r4, #4]
 8002398:	42a3      	cmp	r3, r4
 800239a:	bf0c      	ite	eq
 800239c:	6032      	streq	r2, [r6, #0]
 800239e:	605a      	strne	r2, [r3, #4]
 80023a0:	e7ec      	b.n	800237c <_malloc_r+0xa0>
 80023a2:	4623      	mov	r3, r4
 80023a4:	6864      	ldr	r4, [r4, #4]
 80023a6:	e7b2      	b.n	800230e <_malloc_r+0x32>
 80023a8:	4634      	mov	r4, r6
 80023aa:	6876      	ldr	r6, [r6, #4]
 80023ac:	e7b9      	b.n	8002322 <_malloc_r+0x46>
 80023ae:	230c      	movs	r3, #12
 80023b0:	603b      	str	r3, [r7, #0]
 80023b2:	4638      	mov	r0, r7
 80023b4:	f000 f8b6 	bl	8002524 <__malloc_unlock>
 80023b8:	e7a1      	b.n	80022fe <_malloc_r+0x22>
 80023ba:	6025      	str	r5, [r4, #0]
 80023bc:	e7de      	b.n	800237c <_malloc_r+0xa0>
 80023be:	bf00      	nop
 80023c0:	20001424 	.word	0x20001424

080023c4 <_sbrk_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4d06      	ldr	r5, [pc, #24]	; (80023e0 <_sbrk_r+0x1c>)
 80023c8:	2300      	movs	r3, #0
 80023ca:	4604      	mov	r4, r0
 80023cc:	4608      	mov	r0, r1
 80023ce:	602b      	str	r3, [r5, #0]
 80023d0:	f7ff fb48 	bl	8001a64 <_sbrk>
 80023d4:	1c43      	adds	r3, r0, #1
 80023d6:	d102      	bne.n	80023de <_sbrk_r+0x1a>
 80023d8:	682b      	ldr	r3, [r5, #0]
 80023da:	b103      	cbz	r3, 80023de <_sbrk_r+0x1a>
 80023dc:	6023      	str	r3, [r4, #0]
 80023de:	bd38      	pop	{r3, r4, r5, pc}
 80023e0:	2000142c 	.word	0x2000142c

080023e4 <__sread>:
 80023e4:	b510      	push	{r4, lr}
 80023e6:	460c      	mov	r4, r1
 80023e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023ec:	f000 f8a0 	bl	8002530 <_read_r>
 80023f0:	2800      	cmp	r0, #0
 80023f2:	bfab      	itete	ge
 80023f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023f6:	89a3      	ldrhlt	r3, [r4, #12]
 80023f8:	181b      	addge	r3, r3, r0
 80023fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023fe:	bfac      	ite	ge
 8002400:	6563      	strge	r3, [r4, #84]	; 0x54
 8002402:	81a3      	strhlt	r3, [r4, #12]
 8002404:	bd10      	pop	{r4, pc}

08002406 <__swrite>:
 8002406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800240a:	461f      	mov	r7, r3
 800240c:	898b      	ldrh	r3, [r1, #12]
 800240e:	05db      	lsls	r3, r3, #23
 8002410:	4605      	mov	r5, r0
 8002412:	460c      	mov	r4, r1
 8002414:	4616      	mov	r6, r2
 8002416:	d505      	bpl.n	8002424 <__swrite+0x1e>
 8002418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800241c:	2302      	movs	r3, #2
 800241e:	2200      	movs	r2, #0
 8002420:	f000 f868 	bl	80024f4 <_lseek_r>
 8002424:	89a3      	ldrh	r3, [r4, #12]
 8002426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800242a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800242e:	81a3      	strh	r3, [r4, #12]
 8002430:	4632      	mov	r2, r6
 8002432:	463b      	mov	r3, r7
 8002434:	4628      	mov	r0, r5
 8002436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800243a:	f000 b817 	b.w	800246c <_write_r>

0800243e <__sseek>:
 800243e:	b510      	push	{r4, lr}
 8002440:	460c      	mov	r4, r1
 8002442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002446:	f000 f855 	bl	80024f4 <_lseek_r>
 800244a:	1c43      	adds	r3, r0, #1
 800244c:	89a3      	ldrh	r3, [r4, #12]
 800244e:	bf15      	itete	ne
 8002450:	6560      	strne	r0, [r4, #84]	; 0x54
 8002452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800245a:	81a3      	strheq	r3, [r4, #12]
 800245c:	bf18      	it	ne
 800245e:	81a3      	strhne	r3, [r4, #12]
 8002460:	bd10      	pop	{r4, pc}

08002462 <__sclose>:
 8002462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002466:	f000 b813 	b.w	8002490 <_close_r>
 800246a:	0000      	movs	r0, r0

0800246c <_write_r>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	4d07      	ldr	r5, [pc, #28]	; (800248c <_write_r+0x20>)
 8002470:	4604      	mov	r4, r0
 8002472:	4608      	mov	r0, r1
 8002474:	4611      	mov	r1, r2
 8002476:	2200      	movs	r2, #0
 8002478:	602a      	str	r2, [r5, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	f000 f892 	bl	80025a4 <_write>
 8002480:	1c43      	adds	r3, r0, #1
 8002482:	d102      	bne.n	800248a <_write_r+0x1e>
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	b103      	cbz	r3, 800248a <_write_r+0x1e>
 8002488:	6023      	str	r3, [r4, #0]
 800248a:	bd38      	pop	{r3, r4, r5, pc}
 800248c:	2000142c 	.word	0x2000142c

08002490 <_close_r>:
 8002490:	b538      	push	{r3, r4, r5, lr}
 8002492:	4d06      	ldr	r5, [pc, #24]	; (80024ac <_close_r+0x1c>)
 8002494:	2300      	movs	r3, #0
 8002496:	4604      	mov	r4, r0
 8002498:	4608      	mov	r0, r1
 800249a:	602b      	str	r3, [r5, #0]
 800249c:	f000 f85a 	bl	8002554 <_close>
 80024a0:	1c43      	adds	r3, r0, #1
 80024a2:	d102      	bne.n	80024aa <_close_r+0x1a>
 80024a4:	682b      	ldr	r3, [r5, #0]
 80024a6:	b103      	cbz	r3, 80024aa <_close_r+0x1a>
 80024a8:	6023      	str	r3, [r4, #0]
 80024aa:	bd38      	pop	{r3, r4, r5, pc}
 80024ac:	2000142c 	.word	0x2000142c

080024b0 <_fstat_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4d07      	ldr	r5, [pc, #28]	; (80024d0 <_fstat_r+0x20>)
 80024b4:	2300      	movs	r3, #0
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	602b      	str	r3, [r5, #0]
 80024be:	f000 f851 	bl	8002564 <_fstat>
 80024c2:	1c43      	adds	r3, r0, #1
 80024c4:	d102      	bne.n	80024cc <_fstat_r+0x1c>
 80024c6:	682b      	ldr	r3, [r5, #0]
 80024c8:	b103      	cbz	r3, 80024cc <_fstat_r+0x1c>
 80024ca:	6023      	str	r3, [r4, #0]
 80024cc:	bd38      	pop	{r3, r4, r5, pc}
 80024ce:	bf00      	nop
 80024d0:	2000142c 	.word	0x2000142c

080024d4 <_isatty_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	4d06      	ldr	r5, [pc, #24]	; (80024f0 <_isatty_r+0x1c>)
 80024d8:	2300      	movs	r3, #0
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	602b      	str	r3, [r5, #0]
 80024e0:	f000 f848 	bl	8002574 <_isatty>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d102      	bne.n	80024ee <_isatty_r+0x1a>
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	b103      	cbz	r3, 80024ee <_isatty_r+0x1a>
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	2000142c 	.word	0x2000142c

080024f4 <_lseek_r>:
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	4d07      	ldr	r5, [pc, #28]	; (8002514 <_lseek_r+0x20>)
 80024f8:	4604      	mov	r4, r0
 80024fa:	4608      	mov	r0, r1
 80024fc:	4611      	mov	r1, r2
 80024fe:	2200      	movs	r2, #0
 8002500:	602a      	str	r2, [r5, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f000 f83e 	bl	8002584 <_lseek>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d102      	bne.n	8002512 <_lseek_r+0x1e>
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	b103      	cbz	r3, 8002512 <_lseek_r+0x1e>
 8002510:	6023      	str	r3, [r4, #0]
 8002512:	bd38      	pop	{r3, r4, r5, pc}
 8002514:	2000142c 	.word	0x2000142c

08002518 <__malloc_lock>:
 8002518:	4801      	ldr	r0, [pc, #4]	; (8002520 <__malloc_lock+0x8>)
 800251a:	f7ff be0d 	b.w	8002138 <__retarget_lock_acquire_recursive>
 800251e:	bf00      	nop
 8002520:	20001420 	.word	0x20001420

08002524 <__malloc_unlock>:
 8002524:	4801      	ldr	r0, [pc, #4]	; (800252c <__malloc_unlock+0x8>)
 8002526:	f7ff be08 	b.w	800213a <__retarget_lock_release_recursive>
 800252a:	bf00      	nop
 800252c:	20001420 	.word	0x20001420

08002530 <_read_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4d07      	ldr	r5, [pc, #28]	; (8002550 <_read_r+0x20>)
 8002534:	4604      	mov	r4, r0
 8002536:	4608      	mov	r0, r1
 8002538:	4611      	mov	r1, r2
 800253a:	2200      	movs	r2, #0
 800253c:	602a      	str	r2, [r5, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	f000 f828 	bl	8002594 <_read>
 8002544:	1c43      	adds	r3, r0, #1
 8002546:	d102      	bne.n	800254e <_read_r+0x1e>
 8002548:	682b      	ldr	r3, [r5, #0]
 800254a:	b103      	cbz	r3, 800254e <_read_r+0x1e>
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	bd38      	pop	{r3, r4, r5, pc}
 8002550:	2000142c 	.word	0x2000142c

08002554 <_close>:
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <_close+0xc>)
 8002556:	2258      	movs	r2, #88	; 0x58
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800255e:	4770      	bx	lr
 8002560:	2000142c 	.word	0x2000142c

08002564 <_fstat>:
 8002564:	4b02      	ldr	r3, [pc, #8]	; (8002570 <_fstat+0xc>)
 8002566:	2258      	movs	r2, #88	; 0x58
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800256e:	4770      	bx	lr
 8002570:	2000142c 	.word	0x2000142c

08002574 <_isatty>:
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <_isatty+0xc>)
 8002576:	2258      	movs	r2, #88	; 0x58
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	2000      	movs	r0, #0
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	2000142c 	.word	0x2000142c

08002584 <_lseek>:
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <_lseek+0xc>)
 8002586:	2258      	movs	r2, #88	; 0x58
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800258e:	4770      	bx	lr
 8002590:	2000142c 	.word	0x2000142c

08002594 <_read>:
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <_read+0xc>)
 8002596:	2258      	movs	r2, #88	; 0x58
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800259e:	4770      	bx	lr
 80025a0:	2000142c 	.word	0x2000142c

080025a4 <_write>:
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <_write+0xc>)
 80025a6:	2258      	movs	r2, #88	; 0x58
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ae:	4770      	bx	lr
 80025b0:	2000142c 	.word	0x2000142c

080025b4 <_init>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	bf00      	nop
 80025b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ba:	bc08      	pop	{r3}
 80025bc:	469e      	mov	lr, r3
 80025be:	4770      	bx	lr

080025c0 <_fini>:
 80025c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c2:	bf00      	nop
 80025c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c6:	bc08      	pop	{r3}
 80025c8:	469e      	mov	lr, r3
 80025ca:	4770      	bx	lr
